[
    {
        "domain": [
            "Mathematics -> Algebra -> Other"
        ],
        "difficulty": 8.0,
        "problem": "Let $ n(\\ge2) $ be a positive integer. Find the minimum $ m $, so that there exists $x_{ij}(1\\le i ,j\\le n)$ satisfying:\n(1)For every $1\\le i ,j\\le n, x_{ij}=max\\{x_{i1},x_{i2},...,x_{ij}\\} $ or $ x_{ij}=max\\{x_{1j},x_{2j},...,x_{ij}\\}.$\n(2)For every $1\\le i \\le n$, there are at most $m$ indices $k$ with $x_{ik}=max\\{x_{i1},x_{i2},...,x_{ik}\\}.$\n(3)For every $1\\le j \\le n$, there are at most $m$ indices $k$ with $x_{kj}=max\\{x_{1j},x_{2j},...,x_{kj}\\}.$",
        "solution": "\nLet \\( n (\\geq 2) \\) be a positive integer. We aim to find the minimum \\( m \\) such that there exists \\( x_{ij} \\) (for \\( 1 \\leq i, j \\leq n \\)) satisfying the following conditions:\n1. For every \\( 1 \\leq i, j \\leq n \\), \\( x_{ij} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ij} \\} \\) or \\( x_{ij} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{ij} \\} \\).\n2. For every \\( 1 \\leq i \\leq n \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{ik} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ik} \\} \\).\n3. For every \\( 1 \\leq j \\leq n \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{kj} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{kj} \\} \\).\n\nTo solve this, we need to consider the structure and constraints given by the problem. The solution involves ensuring that the maximum number of indices \\( k \\) for which \\( x_{ik} \\) or \\( x_{kj} \\) is the maximum is minimized.\n\nBy analyzing the constraints and constructing examples, it can be shown that the minimum \\( m \\) satisfying the conditions is:\n\\[\nm = 1 + \\left\\lceil \\frac{n}{2} \\right\\rceil.\n\\]\n\nThus, the minimum value of \\( m \\) is:\n\\[\n\\boxed{1 + \\left\\lceil \\frac{n}{2} \\right\\rceil}.\n\\]",
        "answer": "1 + \\left\\lceil \\frac{n}{2} \\right\\rceil",
        "source": "china_team_selection_test",
        "refined_statement": "Sure, let's refine the problem statement into a standard LaTeX-formatted mathematical proposition.\n\n---\n\n**Step 1: Determine the Problem Type**\n\n- The problem does not have an explicit proof goal; it is a solving problem.\n- The goal is to find the minimum \\( m \\) satisfying the given conditions.\n- An answer is provided, so it is a Verification Proposition.\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Positive integer \\( n \\) such that \\( n \\geq 2 \\).\n  - Matrix of values \\( x_{ij} \\) where \\( 1 \\leq i, j \\leq n \\).\n  - Integer \\( m \\) to be minimized.\n\n- **Properties and Relationships:**\n  - Each element \\( x_{ij} \\) must be either the maximum of its row up to that point or the maximum of its column up to that point.\n  - For each row \\( i \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{ik} \\) is the maximum value up to \\( k \\).\n  - For each column \\( j \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{kj} \\) is the maximum value up to \\( k \\).\n\n- **Constraint Conditions:**\n  - Ensure that the number of maximal indices in each row and column does not exceed \\( m \\).\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\nThe problem is to verify the minimum value of \\( m \\) that satisfies the specified conditions. Here is the refined proposition in LaTeX:\n\n```latex\n\\[\n\\text{Let } n \\geq 2 \\text{ be a positive integer. Determine the minimum integer } m \\text{ such that there exists a matrix } (x_{ij}) \\text{ for } 1 \\leq i, j \\leq n \\text{ satisfying:}\n\\]\n\\begin{enumerate}\n    \\item \\(\\forall\\ 1 \\leq i, j \\leq n, \\ x_{ij} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ij} \\} \\text{ or } x_{ij} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{ij} \\}.\\)\n    \\item \\(\\forall\\ 1 \\leq i \\leq n, \\text{ there are at most } m \\text{ indices } k \\text{ such that } x_{ik} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ik} \\}.\\)\n    \\item \\(\\forall\\ 1 \\leq j \\leq n, \\text{ there are at most } m \\text{ indices } k \\text{ such that } x_{kj} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{kj} \\}.\\)\n\\end{enumerate}\n\\[\n\\text{The minimum value of } m \\text{ is } \\boxed{1 + \\left\\lceil \\frac{n}{2} \\right\\rceil}.\n\\]\n```\n\nThis LaTeX statement clearly sets out the conditions and the conclusion, verifying the given solution to the problem.",
        "latex_code": "\\[\n\\text{Let } n \\geq 2 \\text{ be a positive integer. Determine the minimum integer } m \\text{ such that there exists a matrix } (x_{ij}) \\text{ for } 1 \\leq i, j \\leq n \\text{ satisfying:}\n\\]\n\\begin{enumerate}\n    \\item \\(\\forall\\ 1 \\leq i, j \\leq n, \\ x_{ij} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ij} \\} \\text{ or } x_{ij} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{ij} \\}.\\)\n    \\item \\(\\forall\\ 1 \\leq i \\leq n, \\text{ there are at most } m \\text{ indices } k \\text{ such that } x_{ik} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ik} \\}.\\)\n    \\item \\(\\forall\\ 1 \\leq j \\leq n, \\text{ there are at most } m \\text{ indices } k \\text{ such that } x_{kj} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{kj} \\}.\\)\n\\end{enumerate}\n\\[\n\\text{The minimum value of } m \\text{ is } \\boxed{1 + \\left\\lceil \\frac{n}{2} \\right\\rceil}.\n\\]",
        "tree_structure": null,
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Determine the minimum integer m.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Properties of maxima in sequences.",
                "dependencies": ["Proposition1"]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Introduce the concept of a 'staircase' pattern within the matrix.",
                "dependencies": ["Proposition1"]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Constructive Case",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "SubCase1.1",
                "type": "Sub-Case",
                "content": "Staircase Pattern",
                "dependencies": [
                    "Case1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.1.1",
                "type": "Proposition",
                "content": "Establish that a staircase pattern can achieve m = 1 + \u2308n/2\u2309.",
                "dependencies": [
                    "SubCase1.1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "Necessity of the Bound",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "SubCase2.1",
                "type": "Sub-Case",
                "content": "Contradiction Argument",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.1.1",
                "type": "Proposition",
                "content": "Prove that any configuration with m < 1 + \u2308n/2\u2309 fails to satisfy the conditions.",
                "dependencies": [
                    "SubCase2.1",
                    "AuxiliaryCondition1.1"
                ]
            }
        ],
        "block_tree": "**Problem Conditions:**\n\n- **Definitions:**\n  - Let \\( n \\geq 2 \\) be a positive integer.\n  - Consider a matrix \\( (x_{ij}) \\) for \\( 1 \\leq i, j \\leq n \\).\n\n- **Conditions:**\n  1. For all \\( 1 \\leq i, j \\leq n \\), \\( x_{ij} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ij} \\} \\) or \\( x_{ij} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{ij} \\} \\).\n  2. For all \\( 1 \\leq i \\leq n \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{ik} = \\max \\{ x_{i1}, x_{i2}, \\ldots, x_{ik} \\} \\).\n  3. For all \\( 1 \\leq j \\leq n \\), there are at most \\( m \\) indices \\( k \\) such that \\( x_{kj} = \\max \\{ x_{1j}, x_{2j}, \\ldots, x_{kj} \\} \\).\n\n- **Goal:**\n  - Determine the minimum integer \\( m \\) such that the above conditions are satisfied, which is given by \\( \\boxed{1 + \\left\\lceil \\frac{n}{2} \\right\\rceil} \\).\n\n**Introduce Auxiliary Elements:**\n\n- **Auxiliary Condition 1.1:**\n  - Known lemma: Properties of maxima in sequences.\n\n- **Auxiliary Condition 1.2:**\n  - Introduce the concept of a \"staircase\" pattern within the matrix.\n\n**Decompose the Proof into Blocks:**\n\n- **Proposition 1. Main Proposition:**\n  - Determine the minimum integer \\( m \\).\n\n  - **Case 1: Constructive Case**\n    - **Sub-Case 1.1: Staircase Pattern**\n      - Proposition 1.1.1: Establish that a staircase pattern can achieve \\( m = 1 + \\left\\lceil \\frac{n}{2} \\right\\rceil \\).\n\n  - **Case 2: Necessity of the Bound**\n    - **Sub-Case 2.1: Contradiction Argument**\n      - Proposition 2.1.1: Prove that any configuration with \\( m < 1 + \\left\\lceil \\frac{n}{2} \\right\\rceil \\) fails to satisfy the conditions.\n\n**Proof Tree Structure:**\n\n```\nProposition 1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition 1.1. Properties of Maxima\n\u251c\u2500\u2500 Auxiliary Condition 1.2. Staircase Pattern\n\u251c\u2500\u2500 Case 1. Constructive Case\n\u2502   \u2514\u2500\u2500 Sub-Case 1.1. Staircase Pattern\n\u2502       \u2514\u2500\u2500 Proposition 1.1.1. Establish staircase pattern for m = 1 + \u2308n/2\u2309\n\u2514\u2500\u2500 Case 2. Necessity of the Bound\n    \u2514\u2500\u2500 Sub-Case 2.1. Contradiction Argument\n        \u2514\u2500\u2500 Proposition 2.1.1. Prove necessity of m \u2265 1 + \u2308n/2\u2309\n```\n\n**JSON Representation for Each Node:**\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Determine the minimum integer m.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Properties of maxima in sequences.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Introduce the concept of a 'staircase' pattern within the matrix.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Constructive Case\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"SubCase1.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Staircase Pattern\",\n    \"dependencies\": [\"Case1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Establish that a staircase pattern can achieve m = 1 + \u2308n/2\u2309.\",\n    \"dependencies\": [\"SubCase1.1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"Necessity of the Bound\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"SubCase2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Contradiction Argument\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Prove that any configuration with m < 1 + \u2308n/2\u2309 fails to satisfy the conditions.\",\n    \"dependencies\": [\"SubCase2.1\", \"AuxiliaryCondition1.1\"]\n  }\n]\n```\n\nThis structured representation captures the logical decomposition of the proof into manageable components, aiding in automated proof verification using Lean4."
    },
    {
        "domain": [
            "Mathematics -> Discrete Mathematics -> Graph Theory"
        ],
        "difficulty": 7.0,
        "problem": "A tournament is a directed graph for which every (unordered) pair of vertices has a single directed edge from one vertex to the other.  Let us define a proper directed-edge-coloring to be an assignment of a color to every (directed) edge, so that for every pair of directed edges $\\overrightarrow{uv}$ and $\\overrightarrow{vw}$, those two edges are in different colors.  Note that it is permissible for $\\overrightarrow{uv}$ and $\\overrightarrow{uw}$ to be the same color.  The directed-edge-chromatic-number of a tournament is defined to be the minimum total number of colors that can be used in order to create a proper directed-edge-coloring.  For each $n$, determine the minimum directed-edge-chromatic-number over all tournaments on $n$ vertices.",
        "solution": "\nA tournament is a directed graph for which every (unordered) pair of vertices has a single directed edge from one vertex to the other. Let us define a proper directed-edge-coloring to be an assignment of a color to every directed edge, so that for every pair of directed edges \\(\\overrightarrow{uv}\\) and \\(\\overrightarrow{vw}\\), those two edges are in different colors. Note that it is permissible for \\(\\overrightarrow{uv}\\) and \\(\\overrightarrow{uw}\\) to be the same color. The directed-edge-chromatic-number of a tournament is defined to be the minimum total number of colors that can be used in order to create a proper directed-edge-coloring. For each \\(n\\), we aim to determine the minimum directed-edge-chromatic-number over all tournaments on \\(n\\) vertices.\n\nThe answer is \\(\\lceil \\log_2 n \\rceil\\). \n\nA construction is as follows: Label the vertices \\(\\{1, 2, 3, \\ldots, n\\}\\) and write each label in binary. Then for any two vertices \\(u, v\\), let \\(k\\) be the first position from the right which is different in their binary representations. If the \\(k\\)-th digit is \\(0\\) in \\(u\\) and \\(1\\) in \\(v\\), then draw the edge \\(u \\to v\\). Clearly, this works.\n\nWe now prove the result by induction on \\(n\\). It is trivial for \\(n=1\\). Now say we want to prove the result for \\(n\\), and assume without loss of generality that \\(n\\) is even, say by deleting a vertex if needed. Fix a color, say red, and consider the set \\(S\\) of all the vertices formed by the tails of these red edges. Consider the partition of the vertices of our graph into \\(S\\) and \\(V \\setminus S\\). At least one of these sets has a size at least \\(n/2\\), say \\(S\\).\n\nThen we claim that there cannot be any red edge \"contained\" in \\(S\\). Indeed, if there is, then its head would lie on some \\(v \\in S\\) (since it is contained in \\(S\\)) which already has a red edge going out of it, contradicting the hypothesis.\n\nHence, \\(S\\) has \\(n/2\\) vertices and no edge is red. So\n\\[\n\\chi \\ge 1 + \\log_2 (n/2) = \\log_2(n).\n\\]\nThus, the induction is complete.\n\nThe answer is: \\(\\boxed{\\lceil \\log_2 n \\rceil}\\).",
        "answer": "\\lceil \\log_2 n \\rceil",
        "source": "usa_team_selection_test",
        "refined_statement": "Sure, let's process the problem step-by-step:\n\n---\n**Step 1: Determine the Problem Type**\n\n- The problem has an explicit proof goal, as it provides an answer and a proof.\n- It is a Verification Proposition, asserting that the minimum directed-edge-chromatic-number for a tournament on \\( n \\) vertices is \\( \\lceil \\log_2 n \\rceil \\).\n\n---\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Tournament graph: \\( T = (V, E) \\), where \\( V \\) is the set of vertices and \\( E \\) is the set of directed edges.\n  - Directed-edge-coloring function: \\( c : E \\to C \\), where \\( C \\) is a set of colors.\n  - Binary representation of vertices: Each vertex \\( v \\in V \\) has a unique binary label.\n\n- **Properties and Relationships:**\n  - For every pair of vertices \\( u, v \\in V \\) with \\( u \\neq v \\), there exists exactly one directed edge \\( \\overrightarrow{uv} \\) or \\( \\overrightarrow{vu} \\).\n  - A proper directed-edge-coloring requires that for any pair of directed edges \\( \\overrightarrow{uv} \\) and \\( \\overrightarrow{vw} \\), the colors must satisfy \\( c(\\overrightarrow{uv}) \\neq c(\\overrightarrow{vw}) \\).\n\n- **Constraint Conditions:**\n  - The minimum number of colors required to achieve a proper directed-edge-coloring for the tournament.\n  - The coloring must conform to the condition that no two consecutive edges in any path have the same color.\n\n---\n**Step 3: Construct the Mathematical Proposition**\n\nUsing the identified elements, the mathematical proposition can be constructed as follows in LaTeX:\n\n```latex\n\\[\n\\text{For a tournament } T = (V, E) \\text{ with } |V| = n, \\text{ the minimum directed-edge-chromatic-number, }\n\\chi'(T), \\text{ is } \\lceil \\log_2 n \\rceil.\n\\]\n\\text{Proof: Consider a labeling of the vertices } V = \\{1, 2, \\ldots, n\\} \\text{ with binary representations. For any two vertices } u, v \\in V, \\text{ let } k \\text{ be the first differing position from the right in their binary representations. If the }\nk\\text{-th digit is } 0 \\text{ in } u \\text{ and } 1 \\text{ in } v, \\text{ direct the edge from } u \\text{ to } v. This construction satisfies the coloring condition, using } \\lceil \\log_2 n \\rceil \\text{ colors.}\n\\]\n\\text{By induction on } n, \\text{ assume the result holds for smaller tournaments. For the induction step, consider partitioning the graph into two sets based on a fixed color edge's tail vertices. At least one subset has no edges of the fixed color, ensuring } \\chi'(T) \\ge 1 + \\log_2(n/2) = \\log_2(n).\n\\]\n\\text{Thus, the minimum directed-edge-chromatic-number is } \\boxed{\\lceil \\log_2 n \\rceil}.\n\\]\n```\n\nThis formalizes the problem statement and provides a proof that verifies the assertion of the directed-edge-chromatic-number for tournaments.",
        "latex_code": "\\[\n\\text{For a tournament } T = (V, E) \\text{ with } |V| = n, \\text{ the minimum directed-edge-chromatic-number, }\n\\chi'(T), \\text{ is } \\lceil \\log_2 n \\rceil.\n\\]\n\\text{Proof: Consider a labeling of the vertices } V = \\{1, 2, \\ldots, n\\} \\text{ with binary representations. For any two vertices } u, v \\in V, \\text{ let } k \\text{ be the first differing position from the right in their binary representations. If the }\nk\\text{-th digit is } 0 \\text{ in } u \\text{ and } 1 \\text{ in } v, \\text{ direct the edge from } u \\text{ to } v. This construction satisfies the coloring condition, using } \\lceil \\log_2 n \\rceil \\text{ colors.}\n\\]\n\\text{By induction on } n, \\text{ assume the result holds for smaller tournaments. For the induction step, consider partitioning the graph into two sets based on a fixed color edge's tail vertices. At least one subset has no edges of the fixed color, ensuring } \\chi'(T) \\ge 1 + \\log_2(n/2) = \\log_2(n).\n\\]\n\\text{Thus, the minimum directed-edge-chromatic-number is } \\boxed{\\lceil \\log_2 n \\rceil}.\n\\]",
        "tree_structure": null,
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Construct a directed edge coloring with \u2308log\u2082 n\u2309 colors using the binary labeling method.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Binary Representation of Vertices V = {1, 2, ..., n}.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Edge Direction Determination using the first differing position k.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Base Case for Induction n = 1.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "\u03c7'(T) = 0 since there are no edges.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "Inductive Step for n > 1.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Sub-Case2.1",
                "type": "Sub-Case",
                "content": "Induction Hypothesis for n = k.",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.1.1",
                "type": "Proposition",
                "content": "Graph Partitioning based on a fixed color edge's tail vertices.",
                "dependencies": [
                    "Sub-Case2.1"
                ]
            },
            {
                "id": "Proposition2.1.2",
                "type": "Proposition",
                "content": "Show at least one subset has no edges of the fixed color.",
                "dependencies": [
                    "Sub-Case2.1"
                ]
            }
        ],
        "block_tree": "To decompose the given proposition into a tree-like block structure suitable for Lean4 automated proofs, let's follow the task instructions step by step:\n\n### 1. List the Problem Conditions:\n\n#### Definitions:\n- **Tournament Graph**: A directed graph \\( T = (V, E) \\) where for every pair of distinct vertices \\( u, v \\), there is exactly one directed edge between them.\n- **Directed-Edge-Chromatic-Number**: The minimum number of colors needed to color the edges of a directed graph such that no two edges sharing a vertex have the same color.\n- **Binary Representation**: Each vertex in \\( V \\) is labeled using its binary representation.\n\n#### Goal:\n- Prove that the minimum directed-edge-chromatic-number \\( \\chi'(T) \\) of the tournament graph \\( T \\) is \\( \\lceil \\log_2 n \\rceil \\).\n\n### 2. Introduce Auxiliary Elements:\n\n#### Auxiliary Conditions:\n- **Auxiliary Condition 1.1**: The binary representation of vertices \\( V = \\{1, 2, \\ldots, n\\} \\).\n- **Auxiliary Condition 1.2**: For any two vertices \\( u, v \\in V \\), the first differing position \\( k \\) from the right in their binary representations determines edge direction.\n\n### 3. Decompose the Proof into Blocks:\n\n#### Propositions:\n- **Proposition 1**: Construct a directed edge coloring with \\( \\lceil \\log_2 n \\rceil \\) colors using the binary labeling method.\n\n#### Case Analysis:\n- **Case 1**: Base Case for Induction \\( n = 1 \\).\n  - **Proposition 1.1**: \\( \\chi'(T) = 0 \\) since there are no edges.\n  \n- **Case 2**: Inductive Step for \\( n > 1 \\).\n  - **Sub-Case 2.1**: Assume holds for \\( n = k \\), show holds for \\( n = k + 1 \\).\n    - **Proposition 2.1.1**: Partition the graph based on a fixed color edge's tail vertices.\n    - **Proposition 2.1.2**: Show at least one subset has no edges of the fixed color.\n\n### 4. Generate the Proof Tree Structure:\n\n```plaintext\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Binary Representation of Vertices\n\u251c\u2500\u2500 Auxiliary Condition1.2. Edge Direction Determination\n\u251c\u2500\u2500 Case1. Base Case for Induction n = 1\n\u2502   \u2514\u2500\u2500 Proposition1.1. \u03c7'(T) = 0\n\u2514\u2500\u2500 Case2. Inductive Step for n > 1\n    \u251c\u2500\u2500 Sub-Case2.1. Induction Hypothesis for n = k\n    \u2502   \u251c\u2500\u2500 Proposition2.1.1. Graph Partitioning\n    \u2502   \u2514\u2500\u2500 Proposition2.1.2. No Fixed Color Edges in a Subset\n```\n\n### 5. Organize Each Node's Tasks into JSON Fields:\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Construct a directed edge coloring with \u2308log\u2082 n\u2309 colors using the binary labeling method.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Binary Representation of Vertices V = {1, 2, ..., n}.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Edge Direction Determination using the first differing position k.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Base Case for Induction n = 1.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"\u03c7'(T) = 0 since there are no edges.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"Inductive Step for n > 1.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Sub-Case2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Induction Hypothesis for n = k.\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Graph Partitioning based on a fixed color edge's tail vertices.\",\n    \"dependencies\": [\"Sub-Case2.1\"]\n  },\n  {\n    \"id\": \"Proposition2.1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Show at least one subset has no edges of the fixed color.\",\n    \"dependencies\": [\"Sub-Case2.1\"]\n  }\n]\n```\n\n### 6. Format the Combined Output:\n\nThe text-based tree structure and JSON objects are presented above, accurately reflecting the tasks and dependencies as depicted in the tree. Each node is clearly labeled, and dependencies maintain the logical flow necessary for the proof."
    },
    {
        "domain": [
            "Mathematics -> Algebra -> Algebra -> Polynomial Operations"
        ],
        "difficulty": 8.5,
        "problem": "Does there exist positive reals $a_0, a_1,\\ldots ,a_{19}$, such that the polynomial $P(x)=x^{20}+a_{19}x^{19}+\\ldots +a_1x+a_0$ does not have any real roots, yet all polynomials formed from swapping any two coefficients $a_i,a_j$ has at least one real root?",
        "solution": "\n\nTo determine whether there exist positive reals \\(a_0, a_1, \\ldots, a_{19}\\) such that the polynomial \\(P(x) = x^{20} + a_{19}x^{19} + \\ldots + a_1x + a_0\\) does not have any real roots, yet all polynomials formed from swapping any two coefficients \\(a_i, a_j\\) have at least one real root, we proceed as follows:\n\nConsider the polynomial \\(P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + a_{\\sigma(18)}x^{18} + \\cdots + a_{\\sigma(0)}\\), for all permutations \\(\\sigma\\) of the numbers 0 to 19.\n\nWe construct the coefficients \\(a_i\\) in a specific manner. Let \\(a_i = 10000 + i\\epsilon\\) for \\(i = 0, 1, \\ldots, 19\\) and some small \\(\\epsilon > 0\\). This ensures that \\(a_0 < a_1 < \\cdots < a_{19}\\).\n\nWhen \\(t = 0\\), we substitute \\(x = -100\\). Since \\(\\frac{|a_{19} \\cdot 100^{19}|}{20} > |100^{20}|, |a_{18} \\cdot 100^{18}|, |a_{17} \\cdot 100^{17}|, \\ldots, |a_0|\\), we have \\(P(-100) < 0\\).\n\nAs \\(t \\rightarrow \\infty\\), \\(a_{18} \\rightarrow \\infty\\). When \\(a_{18} > -\\min_{x < 0} \\left( x^2 + a_{19}x + \\frac{a_{17}}{x} + \\cdots + \\frac{a_0}{x^{18}} \\right)\\), \\(P(x) \\geq 0\\) for all \\(x < 0\\). This minimum exists because as \\(x \\rightarrow 0\\), \\(\\frac{a_0}{x^{18}}\\) dominates and the sum tends to positive infinity, so it is positive for some \\(x > x_0\\). Meanwhile, as \\(x \\rightarrow -\\infty\\), \\(x^2\\) dominates, and the sum is positive for some \\(x < x_1\\). The middle interval is closed and bounded, so it achieves its minimum which is finite.\n\nMeanwhile, \\(P(x) > 0\\) for all \\(x \\geq 0\\).\n\nFix \\(t\\) as the minimum value such that \\(P(x) \\geq 0\\) for all \\(x\\). By continuity, there is a root \\(y\\) of \\(P(x)\\), which is clearly negative. If \\(-1 \\leq y < 0\\), then \\(a_{19}y^{19} + a_{18}y^{18} > a_{18}(y^{18} + y^{19}) \\geq 0\\). Grouping the rest similarly in pairs, and using \\(y^{20} > 0\\), \\(P(y) > 0\\), a contradiction.\n\nHence \\(y < -1\\), and \\(y^{19} < y^{17} < \\cdots < y^1 < y^0 < y^2 < \\cdots < y^{18}\\). Since \\(a_{19} < a_{17} < \\cdots < a_1 < a_0 < a_2 < \\cdots < a_{18}\\), by the rearrangement inequality, \\(0 = P(y) > P_\\sigma(y)\\) for \\(\\sigma \\neq \\text{Id}\\).\n\nAdding a small \\(\\delta\\) to \\(t\\), \\(P(x) > 0\\) for all \\(x\\), while \\(P_\\sigma(x)\\) (\\(\\sigma \\neq \\text{Id}\\)) takes both positive and negative values. Therefore, such positive reals \\(a_0, a_1, \\ldots, a_{19}\\) do exist.\n\nThe answer is: \\boxed{\\text{Yes}}.",
        "answer": "\\text{Yes}",
        "source": "china_national_olympiad",
        "refined_statement": "Sure, let's refine the statement into a standard LaTeX-formatted mathematical proposition.\n\n---\n\n**Step 1: Determine the Problem Type**\n\n- The problem has an explicit proof goal.\n- It is an Existence Proposition, as it asserts the existence of a set of coefficients with specific properties.\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Positive real numbers \\(a_0, a_1, \\ldots, a_{19}\\).\n  - Polynomial \\(P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0\\).\n  - Permutations \\(\\sigma\\) of the indices \\(\\{0, 1, \\ldots, 19\\}\\).\n  - Polynomial \\(P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)}\\).\n\n- **Properties and Relationships:**\n  - \\(P(x)\\) does not have any real roots.\n  - For any non-identity permutation \\(\\sigma\\), \\(P_\\sigma(x)\\) has at least one real root.\n\n- **Constraint Conditions:**\n  - \\(a_i > 0\\) for all \\(i\\).\n  - The swapping of any two \\(a_i, a_j\\) leads to \\(P_\\sigma(x)\\) having a real root.\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\n```latex\n\\[\n\\exists \\, a_0, a_1, \\ldots, a_{19} \\in \\mathbb{R}^+, \\text{ such that the polynomial } P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0 \\text{ has no real roots,}\n\\]\n\\[\n\\text{and for every non-identity permutation } \\sigma \\text{ of } \\{0, 1, \\ldots, 19\\}, \\text{ the polynomial } P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)} \\text{ has at least one real root.}\n\\]\n```\n\nThis LaTeX statement clearly outlines the existence of the desired coefficients and the properties of the polynomial in question.",
        "latex_code": "\\[\n\\exists \\, a_0, a_1, \\ldots, a_{19} \\in \\mathbb{R}^+, \\text{ such that the polynomial } P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0 \\text{ has no real roots,}\n\\]\n\\[\n\\text{and for every non-identity permutation } \\sigma \\text{ of } \\{0, 1, \\ldots, 19\\}, \\text{ the polynomial } P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)} \\text{ has at least one real root.}\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Coefficients\n\u2502   \u2514\u2500\u2500 Coefficients \\( a_0, a_1, \\ldots, a_{19} \\) are positive real numbers.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Polynomial\n\u2502   \u2514\u2500\u2500 \\( P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0 \\)\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of Permutation Polynomial\n\u2502   \u2514\u2500\u2500 For any permutation \\( \\sigma \\), \\( P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)} \\)\n\u251c\u2500\u2500 Proposition1.1. \\( P(x) \\) has no real roots.\n\u2514\u2500\u2500 Proposition1.2. For every non-identity permutation \\( \\sigma \\), \\( P_\\sigma(x) \\) has at least one real root.\n    \u251c\u2500\u2500 Case1. Case 1: Specific Structure of Coefficients\n    \u2502   \u2514\u2500\u2500 Proposition1.2.1. Coefficients arranged to maintain root conditions.\n    \u2514\u2500\u2500 Case2. Case 2: General Consideration of Permutations\n        \u2514\u2500\u2500 Proposition1.2.2. Analyze effect of permutations on root existence.\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Coefficients a_0, a_1, ..., a_19 are positive real numbers.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "P(x) = x^{20} + a_{19}x^{19} + ... + a_1x + a_0",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "For any permutation \u03c3, P_\u03c3(x) = x^{20} + a_\u03c3(19)x^{19} + ... + a_\u03c3(0)",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "P(x) has no real roots.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.2",
                "type": "Proposition",
                "content": "For every non-identity permutation \u03c3, P_\u03c3(x) has at least one real root.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.3"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Specific Structure of Coefficients",
                "dependencies": [
                    "Proposition1.2"
                ]
            },
            {
                "id": "Proposition1.2.1",
                "type": "Proposition",
                "content": "Coefficients arranged to maintain root conditions.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "General Consideration of Permutations",
                "dependencies": [
                    "Proposition1.2"
                ]
            },
            {
                "id": "Proposition1.2.2",
                "type": "Proposition",
                "content": "Analyze effect of permutations on root existence.",
                "dependencies": [
                    "Case2"
                ]
            }
        ],
        "block_tree": "To address the given mathematical proposition, we can break it down into a structured tree-like format that aids in understanding and eventually proving the statement using Lean4 or similar proof assistants. Here's how we can represent the problem:\n\n### Problem Conditions:\n\n- **Definitions:**\n  - **Polynomial \\( P(x) \\):** Let \\( P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0 \\), where \\( a_0, a_1, \\ldots, a_{19} \\in \\mathbb{R}^+ \\).\n  - **Permutation Polynomial \\( P_\\sigma(x) \\):** For a permutation \\( \\sigma \\) of \\(\\{0, 1, \\ldots, 19\\}\\), define \\( P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)} \\).\n\n- **Goal:**\n  - Find coefficients \\( a_0, a_1, \\ldots, a_{19} \\in \\mathbb{R}^+ \\) such that:\n    - \\( P(x) \\) has no real roots.\n    - For every non-identity permutation \\( \\sigma \\), \\( P_\\sigma(x) \\) has at least one real root.\n\n### Proof Tree Structure:\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Coefficients\n\u2502   \u2514\u2500\u2500 Coefficients \\( a_0, a_1, \\ldots, a_{19} \\) are positive real numbers.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Polynomial\n\u2502   \u2514\u2500\u2500 \\( P(x) = x^{20} + a_{19}x^{19} + \\cdots + a_1x + a_0 \\)\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of Permutation Polynomial\n\u2502   \u2514\u2500\u2500 For any permutation \\( \\sigma \\), \\( P_\\sigma(x) = x^{20} + a_{\\sigma(19)}x^{19} + \\cdots + a_{\\sigma(0)} \\)\n\u251c\u2500\u2500 Proposition1.1. \\( P(x) \\) has no real roots.\n\u2514\u2500\u2500 Proposition1.2. For every non-identity permutation \\( \\sigma \\), \\( P_\\sigma(x) \\) has at least one real root.\n    \u251c\u2500\u2500 Case1. Case 1: Specific Structure of Coefficients\n    \u2502   \u2514\u2500\u2500 Proposition1.2.1. Coefficients arranged to maintain root conditions.\n    \u2514\u2500\u2500 Case2. Case 2: General Consideration of Permutations\n        \u2514\u2500\u2500 Proposition1.2.2. Analyze effect of permutations on root existence.\n```\n\n### JSON Representation of Nodes:\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Coefficients a_0, a_1, ..., a_19 are positive real numbers.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"P(x) = x^{20} + a_{19}x^{19} + ... + a_1x + a_0\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"For any permutation \u03c3, P_\u03c3(x) = x^{20} + a_\u03c3(19)x^{19} + ... + a_\u03c3(0)\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"P(x) has no real roots.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"For every non-identity permutation \u03c3, P_\u03c3(x) has at least one real root.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.3\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Specific Structure of Coefficients\",\n    \"dependencies\": [\"Proposition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.2.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Coefficients arranged to maintain root conditions.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"General Consideration of Permutations\",\n    \"dependencies\": [\"Proposition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.2.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Analyze effect of permutations on root existence.\",\n    \"dependencies\": [\"Case2\"]\n  }\n]\n```\n\nThis structure provides a clear and organized breakdown of the proposition, facilitating the process of constructing a proof by identifying logical dependencies and sub-propositions."
    },
    {
        "domain": [
            "Mathematics -> Discrete Mathematics -> Algorithms"
        ],
        "difficulty": 7.0,
        "problem": "A physicist encounters $2015$ atoms called usamons. Each usamon either has one electron or zero electrons, and the physicist can't tell the difference.  The physicist's only tool is a diode. The physicist may connect the diode from any usamon $A$ to any other usamon $B$. (This connection is directed.) When she does so, if usamon $A$ has an electron and usamon $B$ does not, then the electron jumps from $A$ to $B$. In any other case, nothing happens. In addition, the physicist cannot tell whether an electron jumps during any given step.  The physicist's goal is to isolate two usamons that she is  sure are currently in the same state. Is there any series of diode usage that makes this possible?",
        "solution": "\nLet the physicist label the usamons as \\(1, 2, \\ldots, 2015\\). Define \\(x_i = 0\\) if usamon \\(i\\) has no electron and \\(x_i = 1\\) if it has an electron.\n\n**Lemma:** If there exists a permutation \\(\\sigma \\in S_n\\) such that the physicist's knowledge is exactly\n\\[ x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(n)}, \\]\nthen firing a diode does not change this fact (though \\(\\sigma\\) may change).\n\n**Proof of Lemma:** If the physicist fires a diode from usamon \\(i\\) to usamon \\(j\\) where \\(\\sigma(i) < \\sigma(j)\\), then the physicist knows the charge distribution won't change. However, if \\(\\sigma(i) > \\sigma(j)\\), then the charges on \\(i\\) and \\(j\\) will swap. Thus, if \\(\\sigma'\\) is a permutation such that \\(\\sigma'(j) = \\sigma(i)\\) and \\(\\sigma'(i) = \\sigma(j)\\), and otherwise \\(\\sigma'(x) = \\sigma(x)\\), then the physicist's information is of the form\n\\[ x_{\\sigma'(1)} \\le x_{\\sigma'(2)} \\le \\cdots \\le x_{\\sigma'(n)}. \\]\nThus, the lemma is proven. \\(\\blacksquare\\)\n\nThis implies that if the physicist has information\n\\[ x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(n)}, \\]\nthen she can never win, because whatever she does, she'll end up with the information\n\\[ x_{\\sigma'(1)} \\le x_{\\sigma'(2)} \\le \\cdots \\le x_{\\sigma'(n)}. \\]\nAt this point, if she presents usamons \\(i\\) and \\(j\\) with \\(\\sigma'(i) < \\sigma'(j)\\), simply set \\(x_i = 0\\) and \\(x_j = 1\\), and the physicist loses.\n\nSince the physicist starts with no information, and even if she knew the \\(\\sigma \\in S_n\\) such that\n\\[ x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(n)}, \\]\nshe still couldn't win. Therefore, with no information to start with, she certainly cannot win. \\(\\blacksquare\\)\n\nThe answer is: \\boxed{\\text{No}}.",
        "answer": "\\text{No}",
        "source": "usa_team_selection_test",
        "refined_statement": "---\nStep 1: Determine the Problem Type\n- The problem has an explicit proof goal.\n- It is a Verification Proposition, asserting that a certain conclusion holds true (i.e., it is impossible for the physicist to determine two usamons that are certainly in the same state).\n\n---\nStep 2: Identify Mathematical Elements\n- Mathematical Objects:\n  - Set of usamons: \\( U = \\{ u_1, u_2, \\ldots, u_{2015} \\} \\).\n  - Electron state function: \\( x : U \\rightarrow \\{0, 1\\} \\), where \\( x(u_i) = 1 \\) if usamon \\( u_i \\) has an electron and \\( x(u_i) = 0 \\) otherwise.\n  - Permutation of usamons: \\( \\sigma \\in S_{2015} \\), representing an ordering of the usamons.\n- Properties and Relationships:\n  - A diode connection from usamon \\( u_i \\) to \\( u_j \\) only causes an electron transfer if \\( x(u_i) = 1 \\) and \\( x(u_j) = 0 \\).\n  - The physicist cannot detect whether an electron transfer occurs.\n  - The physicist seeks a situation where two usamons are known to have the same state.\n- Constraint Conditions:\n  - The physicist starts with no information about the initial electron distribution.\n  - Any permutation \\(\\sigma\\) satisfying \\( x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(2015)} \\) remains valid after firing a diode.\n\n---\nStep 3: Construct the Mathematical Proposition\n```latex\n\\[\n\\text{For the set of usamons } U = \\{ u_1, u_2, \\ldots, u_{2015} \\}, \\text{ let } x : U \\rightarrow \\{0, 1\\} \\text{ be such that } x(u_i) = 1 \\text{ if } u_i \\text{ has an electron, and } 0 \\text{ otherwise.} \n\\]\n\\[\n\\text{Assuming that there exists a permutation } \\sigma \\in S_{2015} \\text{ such that } x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(2015)}, \\text{ this order is preserved or permuted } \\sigma' \\text{ after any diode connection.}\n\\]\n\\[\n\\text{The physicist cannot determine two usamons } u_i, u_j \\text{ with certainty such that } x(u_i) = x(u_j).\n\\]\n\\[\n\\text{Therefore, it is impossible for the physicist to isolate two usamons in the same state with certainty.} \\quad \\boxed{\\text{No}}\n\\]\n```",
        "latex_code": "\\[\n\\text{For the set of usamons } U = \\{ u_1, u_2, \\ldots, u_{2015} \\}, \\text{ let } x : U \\rightarrow \\{0, 1\\} \\text{ be such that } x(u_i) = 1 \\text{ if } u_i \\text{ has an electron, and } 0 \\text{ otherwise.} \n\\]\n\\[\n\\text{Assuming that there exists a permutation } \\sigma \\in S_{2015} \\text{ such that } x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(2015)}, \\text{ this order is preserved or permuted } \\sigma' \\text{ after any diode connection.}\n\\]\n\\[\n\\text{The physicist cannot determine two usamons } u_i, u_j \\text{ with certainty such that } x(u_i) = x(u_j).\n\\]\n\\[\n\\text{Therefore, it is impossible for the physicist to isolate two usamons in the same state with certainty.} \\quad \\boxed{\\text{No}}\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Function x\n\u2502   \u2514\u2500\u2500 Define x : U \u2192 {0, 1} such that x(u_i) = 1 if u_i has an electron, 0 otherwise.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Permutation \u03c3\n\u2502   \u2514\u2500\u2500 There exists \u03c3 \u2208 S_{2015} such that x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)}.\n\u251c\u2500\u2500 Proposition1.1. Effect of Diode Connection\n\u2502   \u2514\u2500\u2500 The order x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)} is preserved or permuted \u03c3' after any diode connection.\n\u2514\u2500\u2500 Proposition1.2. Indistinguishability of Usamons\n    \u2514\u2500\u2500 The physicist cannot determine two usamons u_i, u_j with certainty such that x(u_i) = x(u_j).\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of Function x: Define x : U \u2192 {0, 1} such that x(u_i) = 1 if u_i has an electron, 0 otherwise.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Permutation \u03c3: There exists \u03c3 \u2208 S_{2015} such that x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)}.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Effect of Diode Connection: The order x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)} is preserved or permuted \u03c3' after any diode connection.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.2",
                "type": "Proposition",
                "content": "Indistinguishability of Usamons: The physicist cannot determine two usamons u_i, u_j with certainty such that x(u_i) = x(u_j).",
                "dependencies": [
                    "Proposition1",
                    "Proposition1.1"
                ]
            }
        ],
        "block_tree": "### Statement:\nProve: For the set of usamons \\( U = \\{ u_1, u_2, \\ldots, u_{2015} \\} \\), let \\( x : U \\rightarrow \\{0, 1\\} \\) be such that \\( x(u_i) = 1 \\) if \\( u_i \\) has an electron, and \\( 0 \\) otherwise. Assuming that there exists a permutation \\( \\sigma \\in S_{2015} \\) such that \\( x_{\\sigma(1)} \\le x_{\\sigma(2)} \\le \\cdots \\le x_{\\sigma(2015)} \\), this order is preserved or permuted \\( \\sigma' \\) after any diode connection. The physicist cannot determine two usamons \\( u_i, u_j \\) with certainty such that \\( x(u_i) = x(u_j) \\). Therefore, it is impossible for the physicist to isolate two usamons in the same state with certainty.\n\n### Proof Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Function x\n\u2502   \u2514\u2500\u2500 Define x : U \u2192 {0, 1} such that x(u_i) = 1 if u_i has an electron, 0 otherwise.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Permutation \u03c3\n\u2502   \u2514\u2500\u2500 There exists \u03c3 \u2208 S_{2015} such that x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)}.\n\u251c\u2500\u2500 Proposition1.1. Effect of Diode Connection\n\u2502   \u2514\u2500\u2500 The order x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)} is preserved or permuted \u03c3' after any diode connection.\n\u2514\u2500\u2500 Proposition1.2. Indistinguishability of Usamons\n    \u2514\u2500\u2500 The physicist cannot determine two usamons u_i, u_j with certainty such that x(u_i) = x(u_j).\n```\n\n### JSON Objects for Each Node:\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Function x: Define x : U \u2192 {0, 1} such that x(u_i) = 1 if u_i has an electron, 0 otherwise.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Permutation \u03c3: There exists \u03c3 \u2208 S_{2015} such that x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)}.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Effect of Diode Connection: The order x_{\u03c3(1)} \u2264 x_{\u03c3(2)} \u2264 ... \u2264 x_{\u03c3(2015)} is preserved or permuted \u03c3' after any diode connection.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Indistinguishability of Usamons: The physicist cannot determine two usamons u_i, u_j with certainty such that x(u_i) = x(u_j).\",\n    \"dependencies\": [\"Proposition1\", \"Proposition1.1\"]\n  }\n]\n```\n\n### Explanation:\n- **Problem Conditions**: We define the function \\( x \\) and introduce the permutation \\( \\sigma \\) which helps order the elements based on their values.\n- **Auxiliary Elements**: The definition of the function and the permutation are auxiliary conditions required to understand the statement.\n- **Decomposition of Proof**: The main proof is broken down into the effect of diode connections and the indistinguishability of usamons.\n- **Logical Flow**: Each proposition or condition logically follows from the previous, building up to the final statement of indistinguishability, which leads to the impossibility of isolating usamons in the same state."
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Polygons",
            "Mathematics -> Algebra -> Other"
        ],
        "difficulty": 8.0,
        "problem": "There are $2022$ equally spaced points on a circular track $\\gamma$ of circumference $2022$. The points are labeled $A_1, A_2, \\ldots, A_{2022}$ in some order, each label used once. Initially, Bunbun the Bunny begins at $A_1$. She hops along $\\gamma$ from $A_1$ to $A_2$, then from $A_2$ to $A_3$, until she reaches $A_{2022}$, after which she hops back to $A_1$. When hopping from $P$ to $Q$, she always hops along the shorter of the two arcs $\\widehat{PQ}$ of $\\gamma$; if $\\overline{PQ}$ is a diameter of $\\gamma$, she moves along either semicircle.\n\nDetermine the maximal possible sum of the lengths of the $2022$ arcs which Bunbun traveled, over all possible labellings of the $2022$ points.\n\n[i]Kevin Cong[/i]",
        "solution": "\nThere are \\(2022\\) equally spaced points on a circular track \\(\\gamma\\) of circumference \\(2022\\). The points are labeled \\(A_1, A_2, \\ldots, A_{2022}\\) in some order, each label used once. Initially, Bunbun the Bunny begins at \\(A_1\\). She hops along \\(\\gamma\\) from \\(A_1\\) to \\(A_2\\), then from \\(A_2\\) to \\(A_3\\), until she reaches \\(A_{2022}\\), after which she hops back to \\(A_1\\). When hopping from \\(P\\) to \\(Q\\), she always hops along the shorter of the two arcs \\(\\widehat{PQ}\\) of \\(\\gamma\\); if \\(\\overline{PQ}\\) is a diameter of \\(\\gamma\\), she moves along either semicircle.\n\nTo determine the maximal possible sum of the lengths of the \\(2022\\) arcs which Bunbun traveled, we consider the following:\n\nLabel the points around the circle \\(P_1\\) to \\(P_{2022}\\) in circular order. Without loss of generality, let \\(A_1 = P_1\\).\n\nAn equality case occurs when the points are labeled as follows: \\(P_1, P_{1012}, P_2, P_{1013}, \\ldots, P_{1011}, P_{2022}\\), then back to \\(P_1\\).\n\nConsider the sequence of points \\(A_1 = P_1, A_3, \\ldots, A_{2021}\\). The sum of the lengths of the \\(2022\\) arcs is at most the sum of the major arcs \\(\\widehat{A_1A_3}, \\widehat{A_3A_5}, \\ldots, \\widehat{A_{2021}A_1}\\).\n\nThis is \\(2022 \\cdot 1011\\) minus the sum of the minor arcs \\(\\widehat{A_1A_3}, \\widehat{A_3A_5}, \\ldots, \\widehat{A_{2021}A_1}\\) (denote this sum as \\(S\\)). The sum \\(S\\) is minimized when \\(A_1A_3 \\ldots A_{2021}\\) forms a convex polygon. If the polygon includes point \\(P_{1012}\\) or has points on both sides of the diameter \\(P_1P_{1012}\\), the sum of arc lengths is \\(2022\\). Otherwise, it is \\(P_1P_2P_3 \\ldots P_{1011}\\) or \\(P_1P_{2022}P_{2021} \\ldots P_{1013}\\), and the sum of arc lengths is \\(2020\\).\n\nThus, the maximal possible sum of the lengths of the \\(2022\\) arcs is:\n\\[\n2022 \\cdot 1011 - 2020 = 2042222.\n\\]\n\nThe answer is: \\boxed{2042222}.",
        "answer": "2042222",
        "source": "usa_team_selection_test_for_imo",
        "refined_statement": "To refine this problem into a standard LaTeX-formatted mathematical proposition, let's follow the outlined steps:\n\n---\n\n**Step 1: Determine the Problem Type**\n\n- The problem has an explicit proof goal.\n- It is a Verification Proposition, as it provides the solution and verifies that this is the maximal possible sum of arc lengths.\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Circular track \\(\\gamma\\) with circumference \\(2022\\).\n  - Set of points: \\(A = \\{A_1, A_2, \\ldots, A_{2022}\\}\\).\n  - Labeling of points in circular order: \\(P = \\{P_1, P_2, \\ldots, P_{2022}\\}\\).\n  - Function for arc length: \\(f(P_i, P_j)\\) represents the length of the shorter arc \\(\\widehat{P_iP_j}\\).\n\n- **Properties and Relationships:**\n  - Each point is equally spaced on \\(\\gamma\\).\n  - Bunbun hops from \\(A_1\\) to \\(A_2\\) to \\(A_3\\), ..., to \\(A_{2022}\\), and back to \\(A_1\\).\n  - For each hop from \\(P\\) to \\(Q\\), Bunbun travels the shorter arc or either semicircle if \\(\\overline{PQ}\\) is a diameter.\n\n- **Constraint Conditions:**\n  - The objective is to maximize the sum of the lengths of arcs traveled by Bunbun over all possible labelings of the points.\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\nHere is the refined mathematical proposition in LaTeX format:\n\n```latex\n\\[\n\\text{Let } \\gamma \\text{ be a circular track of circumference } 2022, \\text{ with equally spaced points } A_1, A_2, \\ldots, A_{2022}.\n\\]\n\\[\n\\text{Determine the maximal possible sum of the lengths of the arcs } \\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}.\n\\]\n\\[\n\\text{Bunbun travels from } A_1 \\text{ to } A_2, \\text{ then } A_2 \\text{ to } A_3, \\ldots, \\text{ until } A_{2022}, \\text{ and back to } A_1.\n\\]\n\\[\n\\text{She always hops along the shorter arc } \\widehat{PQ} \\text{ or either semicircle if } \\overline{PQ} \\text{ is a diameter.}\n\\]\n\\[\n\\text{The maximal sum of the arc lengths over all possible labelings of the points is } \\boxed{2042222}.\n\\]\n```\n\nThis proposition verifies that the maximal possible sum of the arc lengths for Bunbun's journey, over all possible point labelings, is indeed \\(2042222\\).",
        "latex_code": "\\[\n\\text{Let } \\gamma \\text{ be a circular track of circumference } 2022, \\text{ with equally spaced points } A_1, A_2, \\ldots, A_{2022}.\n\\]\n\\[\n\\text{Determine the maximal possible sum of the lengths of the arcs } \\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}.\n\\]\n\\[\n\\text{Bunbun travels from } A_1 \\text{ to } A_2, \\text{ then } A_2 \\text{ to } A_3, \\ldots, \\text{ until } A_{2022}, \\text{ and back to } A_1.\n\\]\n\\[\n\\text{She always hops along the shorter arc } \\widehat{PQ} \\text{ or either semicircle if } \\overline{PQ} \\text{ is a diameter.}\n\\]\n\\[\n\\text{The maximal sum of the arc lengths over all possible labelings of the points is } \\boxed{2042222}.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of shorter arc\n\u2502   \u2514\u2500\u2500 Bunbun always chooses the shorter arc \\(\\widehat{PQ}\\) or either semicircle if \\(\\overline{PQ}\\) is a diameter.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Summation of arcs\n\u2502   \u2514\u2500\u2500 Maximize the sum of arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\).\n\u251c\u2500\u2500 Proposition1.1. Bunbun\u2019s path strategy\n\u2502   \u2514\u2500\u2500 Determine the strategy Bunbun uses for maximizing the sum of arc lengths.\n\u2514\u2500\u2500 Proposition1.2. Maximal arc length condition\n    \u2514\u2500\u2500 Prove that the sum of the maximal arc lengths over all possible configurations is \\(\\boxed{2042222}\\).\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Main Proposition",
                "content": "Determine the maximal possible sum of the lengths of the arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\).",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of shorter arc: Bunbun always chooses the shorter arc \\(\\widehat{PQ}\\) or either semicircle if \\(\\overline{PQ}\\) is a diameter.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Summation of arcs: Maximize the sum of arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\).",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Bunbun\u2019s path strategy: Determine the strategy Bunbun uses for maximizing the sum of arc lengths.",
                "dependencies": [
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.2",
                "type": "Proposition",
                "content": "Maximal arc length condition: Prove that the sum of the maximal arc lengths over all possible configurations is \\(\\boxed{2042222}\\).",
                "dependencies": [
                    "Proposition1.1"
                ]
            }
        ],
        "block_tree": "Certainly! Let's break down the given proposition into a structured proof tree with nodes represented as JSON objects.\n\n### Problem Conditions:\n\n#### Definitions:\n- **Circle**: A circular track denoted by \\(\\gamma\\) with a circumference of 2022.\n- **Points**: Equally spaced points \\(A_1, A_2, \\ldots, A_{2022}\\) on the circle.\n- **Arcs**: Arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\) represent the path traveled.\n\n#### Goal:\n- **Objective**: To determine the maximal possible sum of the lengths of these arcs when Bunbun travels from \\(A_1\\) to \\(A_2\\) and continues in this manner until returning to \\(A_1\\), always choosing the shorter arc or either semicircle if \\(\\overline{PQ}\\) is a diameter.\n\n### Auxiliary Elements:\n\n#### Auxiliary Conditions:\n- **Auxiliary Condition 1.1**: Definition of shorter arc\n  - Bunbun always chooses the shorter arc \\(\\widehat{PQ}\\) between two points \\(P\\) and \\(Q\\), or either semicircle if \\(\\overline{PQ}\\) is a diameter.\n- **Auxiliary Condition 1.2**: Summation of arcs\n  - The sum of arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\) is to be maximized over all possible labelings of points.\n\n### Decompose the Proof into Blocks:\n\n#### Propositions:\n- **Proposition 1.1**: Bunbun\u2019s path strategy\n  - Determine the strategy Bunbun uses for maximizing the sum of arc lengths.\n- **Proposition 1.2**: Maximal arc length condition\n  - Prove that the sum of the maximal arc lengths over all possible configurations is \\(\\boxed{2042222}\\).\n\n### Proof Tree Structure:\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of shorter arc\n\u2502   \u2514\u2500\u2500 Bunbun always chooses the shorter arc \\(\\widehat{PQ}\\) or either semicircle if \\(\\overline{PQ}\\) is a diameter.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Summation of arcs\n\u2502   \u2514\u2500\u2500 Maximize the sum of arcs \\(\\widehat{A_1A_2}, \\widehat{A_2A_3}, \\ldots, \\widehat{A_{2022}A_1}\\).\n\u251c\u2500\u2500 Proposition1.1. Bunbun\u2019s path strategy\n\u2502   \u2514\u2500\u2500 Determine the strategy Bunbun uses for maximizing the sum of arc lengths.\n\u2514\u2500\u2500 Proposition1.2. Maximal arc length condition\n    \u2514\u2500\u2500 Prove that the sum of the maximal arc lengths over all possible configurations is \\(\\boxed{2042222}\\).\n```\n\n### JSON Objects for Each Node:\n\n```json\n[\n    {\n        \"id\": \"Proposition1\",\n        \"type\": \"Main Proposition\",\n        \"content\": \"Determine the maximal possible sum of the lengths of the arcs \\\\(\\\\widehat{A_1A_2}, \\\\widehat{A_2A_3}, \\\\ldots, \\\\widehat{A_{2022}A_1}\\\\).\",\n        \"dependencies\": []\n    },\n    {\n        \"id\": \"AuxiliaryCondition1.1\",\n        \"type\": \"Auxiliary Condition\",\n        \"content\": \"Definition of shorter arc: Bunbun always chooses the shorter arc \\\\(\\\\widehat{PQ}\\\\) or either semicircle if \\\\(\\\\overline{PQ}\\\\) is a diameter.\",\n        \"dependencies\": [\"Proposition1\"]\n    },\n    {\n        \"id\": \"AuxiliaryCondition1.2\",\n        \"type\": \"Auxiliary Condition\",\n        \"content\": \"Summation of arcs: Maximize the sum of arcs \\\\(\\\\widehat{A_1A_2}, \\\\widehat{A_2A_3}, \\\\ldots, \\\\widehat{A_{2022}A_1}\\\\).\",\n        \"dependencies\": [\"Proposition1\"]\n    },\n    {\n        \"id\": \"Proposition1.1\",\n        \"type\": \"Proposition\",\n        \"content\": \"Bunbun\u2019s path strategy: Determine the strategy Bunbun uses for maximizing the sum of arc lengths.\",\n        \"dependencies\": [\"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\"]\n    },\n    {\n        \"id\": \"Proposition1.2\",\n        \"type\": \"Proposition\",\n        \"content\": \"Maximal arc length condition: Prove that the sum of the maximal arc lengths over all possible configurations is \\\\(\\\\boxed{2042222}\\\\).\",\n        \"dependencies\": [\"Proposition1.1\"]\n    }\n]\n```\n\nThis breakdown provides a structured way to approach the proof using Lean4, with clear definitions, auxiliary conditions, and logically ordered propositions. The JSON objects represent the hierarchical and dependency relationships, making it straightforward to automate the proof process."
    },
    {
        "domain": [
            "Mathematics -> Discrete Mathematics -> Graph Theory"
        ],
        "difficulty": 9.0,
        "problem": "A table tennis club hosts a series of doubles matches following several rules:\n(i)  each player belongs to two pairs at most;\n(ii) every two distinct pairs play one game against each other at most;\n(iii) players in the same pair do not play against each other when they pair with others respectively.\nEvery player plays a certain number of games in this series. All these distinct numbers make up a set called the \u201c[i]set of games[/i]\u201d. Consider a set $A=\\{a_1,a_2,\\ldots ,a_k\\}$ of positive integers such that every element in $A$ is divisible by $6$. Determine the minimum number of players needed to participate in this series so that a schedule for which the corresponding [i]set of games [/i] is equal to set $A$ exists.",
        "solution": "\nTo determine the minimum number of players needed to participate in the series such that the set of games is equal to the set \\( A \\), we start by analyzing the problem through graph theory.\n\nConsider a graph \\( \\mathcal{G} \\) where each vertex represents a player and an edge between two vertices represents a pair of players. According to the problem's conditions:\n1. Each player belongs to at most two pairs.\n2. Every two distinct pairs play one game against each other at most.\n3. Players in the same pair do not play against each other when they pair with others respectively.\n\nGiven these conditions, each vertex in \\( \\mathcal{G} \\) can have a degree of at most 2. This implies that \\( \\mathcal{G} \\) can be decomposed into disjoint cycles, paths, and isolated vertices.\n\nLet \\( \\max A = a \\). We need to ensure that there is a player who plays \\( a \\) games, and each element in \\( A \\) is divisible by 6. To achieve this, we need to construct a graph where the number of games each player plays corresponds to the elements in \\( A \\).\n\n### Proof of Optimality\nLet \\( x \\) be a vertex with the maximum number of games \\( a \\). This vertex \\( x \\) must be connected to at least one other vertex. If \\( x \\) has only one edge, it must have \\( a \\) games on it. If \\( x \\) has two edges, each edge must have at least \\( \\frac{a}{2} \\) games.\n\nLet \\( xy \\) be an edge with \\( \\geq \\frac{a}{2} \\) games. The remaining vertices must account for at least \\( \\frac{a}{2} \\) edges, ensuring that there are at least \\( \\frac{a}{2} + 2 \\) vertices. However, due to the constraints, there must be at least \\( \\frac{a}{2} + 3 \\) vertices to satisfy all conditions.\n\n### Construction\nTo construct such a graph, we can use clusters of three players, each forming pairs within the cluster. This ensures that each player in a cluster plays 6 games per edge. By assigning each cluster to a vertex in a graph \\( \\mathcal{G} \\) with \\( b \\) vertices, where \\( b = \\frac{1}{6} \\max A + 1 \\), we can ensure that the set of games corresponds to \\( A \\).\n\nThus, the minimum number of players needed is:\n\\[\n\\frac{1}{2} \\max A + 3.\n\\]\n\nThe answer is: \\boxed{\\frac{1}{2} \\max A + 3}.",
        "answer": "\\frac{1}{2} \\max A + 3",
        "source": "china_national_olympiad",
        "refined_statement": "---\n**Step 1: Determine the Problem Type**\n\n- The problem does not have an explicit proof goal; it is a solving problem.\n- The goal is to determine the minimum number of players required to satisfy the given conditions for the set of games.\n- It is a Verification Proposition, as the answer has been provided.\n\n---\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Set of players: \\( P = \\{ p_1, p_2, \\ldots, p_n \\} \\).\n  - Set of pairs: \\( Q = \\{ q_1, q_2, \\ldots, q_m \\} \\), where each \\( q_i = \\{ p_j, p_k \\} \\) and \\( p_j, p_k \\in P \\).\n  - Set of games: Corresponds to the set \\( A = \\{ a_1, a_2, \\ldots, a_k \\} \\).\n\n- **Properties and Relationships:**\n  - Each player is part of at most two pairs.\n  - Each distinct pair plays one game against another pair at most.\n  - Players in the same pair do not play against each other when paired with others.\n\n- **Constraint Conditions:**\n  - Each element in \\( A \\) is divisible by 6.\n  - The maximum number of games played by a player corresponds to \\(\\max A\\).\n  - The schedule must be constructed such that the set of games equals \\( A \\).\n\n---\n**Step 3: Construct the Mathematical Proposition**\n\nGiven a set \\( A = \\{ a_1, a_2, \\ldots, a_k \\} \\) of positive integers, where each \\( a_i \\) is divisible by 6, the minimum number of players \\( n \\) needed in a doubles match series such that the set of games is equal to \\( A \\) can be determined by the following proposition:\n\n```latex\n\\[\n\\text{Let } A = \\{ a_1, a_2, \\ldots, a_k \\} \\text{ be a set of positive integers such that each } a_i \\text{ is divisible by 6.}\\\\\n\\text{The minimum number of players } n \\text{ required such that the set of games equals } A \\text{ is given by:}\\\\\nn = \\frac{1}{2} \\max A + 3.\n\\]\n```",
        "latex_code": "\\[\n\\text{Let } A = \\{ a_1, a_2, \\ldots, a_k \\} \\text{ be a set of positive integers such that each } a_i \\text{ is divisible by 6.}\\\\\n\\text{The minimum number of players } n \\text{ required such that the set of games equals } A \\text{ is given by:}\\\\\nn = \\frac{1}{2} \\max A + 3.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Divisibility Condition\n\u2502   \u2514\u2500\u2500 Each a_i is divisible by 6\n\u251c\u2500\u2500 Auxiliary Condition1.2. Maximum Element\n\u2502   \u2514\u2500\u2500 Define max A = max(a_1, a_2, ..., a_k)\n\u2514\u2500\u2500 Case1. Case 1: max A = 6m for some integer m\n    \u2514\u2500\u2500 Sub-Case1.1. Sub-Case 1.1: n is an integer satisfying n = 3m + 3\n        \u2514\u2500\u2500 Proposition1.1.1. Verify that the formula produces an integer\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition: Prove that n = 1/2 * max A + 3.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Each a_i is divisible by 6.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Define max A = max(a_1, a_2, ..., a_k).",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Case 1: max A = 6m for some integer m.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "SubCase1.1",
                "type": "Sub-Case",
                "content": "Sub-Case 1.1: n is an integer satisfying n = 3m + 3.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Proposition1.1.1",
                "type": "Proposition",
                "content": "Verify that the formula produces an integer.",
                "dependencies": [
                    "SubCase1.1"
                ]
            }
        ],
        "block_tree": "To break down the given proposition into a tree-like Block Structure for Lean4 automated proofs, we will follow the task instructions step by step. The aim is to decompose the proof into a series of blocks, each contributing to the overall proof, while ensuring clarity and logical coherence.\n\n### 1. Problem Conditions\n\n#### Definitions\n- **Set \\( A \\)**: A collection of positive integers \\( \\{ a_1, a_2, \\ldots, a_k \\} \\) where each \\( a_i \\) is divisible by 6.\n- **Symbol \\( n \\)**: Represents the minimum number of players required.\n- **Symbol \\( \\max A \\)**: The maximum element in the set \\( A \\).\n\n#### Goal\n- Prove that the minimum number of players \\( n \\) required such that the set of games equals \\( A \\) is given by:\n  \\[\n  n = \\frac{1}{2} \\max A + 3.\n  \\]\n\n### 2. Introduce Auxiliary Elements\n\n#### Auxiliary Conditions\n- **Auxiliary Condition 1.1**: Divisibility condition, \\( a_i \\equiv 0 \\pmod{6} \\) for all \\( a_i \\in A \\).\n- **Auxiliary Condition 1.2**: Definition of maximum element, \\( \\max A = \\max(a_1, a_2, \\ldots, a_k) \\).\n\n### 3. Decompose the Proof into Blocks\n\n#### Proposition\n- **Proposition 1**: Main Proposition\n  - Prove that \\( n = \\frac{1}{2} \\max A + 3 \\).\n\n#### Case Analysis\n- **Case 1**: \\( \\max A = 6m \\) for some integer \\( m \\).\n  - **Sub-Case 1.1**: \\( n \\) is an integer satisfying \\( n = \\frac{1}{2} \\cdot 6m + 3 \\).\n    - **Proposition 1.1.1**: Verify that the formula produces an integer for any \\( m \\).\n\n### 4. Generate the Proof Tree Structure\n\n#### Text-Based Tree Structure\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Divisibility Condition\n\u2502   \u2514\u2500\u2500 Each a_i is divisible by 6\n\u251c\u2500\u2500 Auxiliary Condition1.2. Maximum Element\n\u2502   \u2514\u2500\u2500 Define max A = max(a_1, a_2, ..., a_k)\n\u2514\u2500\u2500 Case1. Case 1: max A = 6m for some integer m\n    \u2514\u2500\u2500 Sub-Case1.1. Sub-Case 1.1: n is an integer satisfying n = 3m + 3\n        \u2514\u2500\u2500 Proposition1.1.1. Verify that the formula produces an integer\n```\n\n### 5. Organize Each Node's Tasks into JSON Fields\n\n#### JSON Structure\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition: Prove that n = 1/2 * max A + 3.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Each a_i is divisible by 6.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Define max A = max(a_1, a_2, ..., a_k).\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Case 1: max A = 6m for some integer m.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"SubCase1.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 1.1: n is an integer satisfying n = 3m + 3.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Proposition1.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Verify that the formula produces an integer.\",\n    \"dependencies\": [\"SubCase1.1\"]\n  }\n]\n```\n\n### 6. Format the Combined Output\n\nBoth the Text-Based Tree Structure and the JSON Objects have been presented. This structured approach ensures clarity and logical coherence in breaking down the mathematical proposition into manageable components for Lean4 automated proofs."
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Other",
            "Mathematics -> Discrete Mathematics -> Combinatorics",
            "Mathematics -> Discrete Mathematics -> Graph Theory"
        ],
        "difficulty": 7.0,
        "problem": "For a pair $ A \\equal{} (x_1, y_1)$ and $ B \\equal{} (x_2, y_2)$ of points on the coordinate plane, let $ d(A,B) \\equal{} |x_1 \\minus{} x_2| \\plus{} |y_1 \\minus{} y_2|$. We call a pair $ (A,B)$ of (unordered) points [i]harmonic[/i] if $ 1 < d(A,B) \\leq 2$. Determine the maximum number of harmonic pairs among 100 points in the plane.",
        "solution": "\nGiven a set of 100 points in the plane, we want to determine the maximum number of harmonic pairs, where a pair \\((A, B)\\) of points is considered harmonic if \\(1 < d(A, B) \\leq 2\\) and \\(d(A, B) = |x_1 - x_2| + |y_1 - y_2|\\).\n\nTo solve this problem, we can transform the distance function to make it easier to handle. By rotating the plane by 45 degrees, we change the coordinates of a point \\(P = (x, y)\\) to \\(P' = (x - y, x + y)\\). Under this transformation, the Manhattan distance \\(d(P, Q)\\) becomes \\(d'(P', Q') = \\max \\{ |P'_x - Q'_x|, |P'_y - Q'_y| \\}\\).\n\nWe claim that the maximum number of harmonic pairs is \\(\\frac{3 \\times 100^2}{4 \\times 2} = 3750\\). To achieve this bound, we can place 25 points each in small neighborhoods around the four points \\((\\pm \\frac{1.0201082102011209}{2}, \\pm \\frac{1.0201082102011209}{2})\\).\n\nTo prove that this is the maximum number, we construct a graph \\(G\\) with 100 vertices, where two vertices are connected if the corresponding points are harmonic. We need to show that \\(G\\) has no \\(K_5\\) (complete graph on 5 vertices).\n\n**Claim:** \\(G\\) has no \\(K_5\\).\n\n**Proof:** Consider the following two facts:\n1. If a coloring of the edges of \\(K_5\\) with two colors does not produce a monochromatic triangle, then it must have a monochromatic cycle of length 5.\n2. It is impossible to find three real numbers \\(A, B, C\\) such that all points \\((A, 0), (B, 0), (C, 0)\\) are mutually harmonic.\n\nFor each edge \\(PQ\\) in \\(G\\), color the edge red if \\(\\max \\{ |P_x - Q_x|, |P_y - Q_y| \\} = |P_x - Q_x|\\), or blue otherwise. Suppose, for contradiction, that there is a \\(K_5\\) in \\(G\\) with points \\(A, B, C, D, E\\). By fact 2, it has no monochromatic triangle, so by fact 1, it has a monochromatic cycle of length 5. Without loss of generality, assume the cycle is red, and let it be \\(A \\rightarrow B \\rightarrow \\cdots \\rightarrow E\\).\n\nIf \\(\\max(A_y, B_y, C_y, D_y, E_y) - \\min(A_y, B_y, C_y, D_y, E_y) > 2\\), we have a contradiction because the extreme points would not be harmonic. Therefore, \\(\\max(A_y, B_y, C_y, D_y, E_y) - \\min(A_y, B_y, C_y, D_y, E_y) \\leq 2\\). Assume \\(\\min(A_y, B_y, C_y, D_y, E_y) = A_y = 0\\), so \\(\\max(A_y, B_y, C_y, D_y, E_y) \\leq 2\\). Thus, \\(A_y, B_y, C_y, D_y, E_y \\in [0, 2]\\).\n\nColor the vertices with ordinate in \\([0, 1]\\) black and those in \\((1, 2]\\) white. Traversing \\(A \\rightarrow B \\rightarrow \\cdots \\rightarrow E\\) changes the color of the interval each time, implying the odd cycle is bipartite, which is a contradiction.\n\nBy Turan's theorem, the strictest bound possible for the number of edges in \\(G\\) without a \\(K_5\\) is \\(\\frac{3 \\times 100^2}{4 \\times 2} = 3750\\).\n\nThe answer is \\(\\boxed{3750}\\).",
        "answer": "3750",
        "source": "usa_team_selection_test",
        "refined_statement": "To refine the given problem into a standard LaTeX-formatted mathematical proposition, let's follow the specified steps:\n\n---\n**Step 1: Determine the Problem Type**\n\n- The problem does not initially present an explicit proof goal; it is a solving problem where we need to determine the maximum number of harmonic pairs among 100 points on the plane. \n- Since the answer is provided, it is a Verification Proposition, asserting that the maximum number of harmonic pairs is indeed 3750.\n\n---\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Set of points: \\( P = \\{P_1, P_2, \\ldots, P_{100}\\} \\), where each point \\( P_i = (x_i, y_i) \\) is on the coordinate plane.\n  - Distance function: \\( d(A, B) = |x_1 - x_2| + |y_1 - y_2| \\) for points \\( A = (x_1, y_1) \\) and \\( B = (x_2, y_2) \\).\n\n- **Properties and Relationships:**\n  - A pair \\((A, B)\\) of points is harmonic if \\( 1 < d(A, B) \\leq 2 \\).\n  - The transformation \\( P' = (x - y, x + y) \\) is used to simplify the distance calculation to \\( d'(P', Q') = \\max \\{ |P'_x - Q'_x|, |P'_y - Q'_y| \\} \\).\n\n- **Constraint Conditions:**\n  - Total number of points is 100.\n  - We aim to find the maximum number of harmonic pairs.\n\n---\n**Step 3: Construct the Mathematical Proposition**\n\nUsing the elements identified in step 2, the mathematical proposition in LaTeX format is:\n\n```latex\n\\[\n\\text{Let } P = \\{(x_i, y_i) \\mid i = 1, 2, \\ldots, 100\\} \\text{ be a set of 100 points on the coordinate plane.}\n\\]\n\\[\n\\text{Define the distance function } d: P \\times P \\to \\mathbb{R} \\text{ by } d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|.\n\\]\n\\[\n\\text{We say a pair of distinct points } (A, B) \\text{ is harmonic if } 1 < d(A, B) \\leq 2.\n\\]\n\\[\n\\text{The proposition to verify is: the maximum number of harmonic pairs among these 100 points is } 3750.\n\\]\n\\]\n``` \n\nThis construction verifies that the maximum number of harmonic pairs given the constraints and properties is indeed as specified by the problem statement.",
        "latex_code": "\\[\n\\text{Let } P = \\{(x_i, y_i) \\mid i = 1, 2, \\ldots, 100\\} \\text{ be a set of 100 points on the coordinate plane.}\n\\]\n\\[\n\\text{Define the distance function } d: P \\times P \\to \\mathbb{R} \\text{ by } d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|.\n\\]\n\\[\n\\text{We say a pair of distinct points } (A, B) \\text{ is harmonic if } 1 < d(A, B) \\leq 2.\n\\]\n\\[\n\\text{The proposition to verify is: the maximum number of harmonic pairs among these 100 points is } 3750.\n\\]\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Set P\n\u2502   \u2514\u2500\u2500 Define P = {(x_i, y_i) | i = 1, 2, ..., 100}\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Distance Function d\n\u2502   \u2514\u2500\u2500 Define d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of Harmonic Pair\n\u2502   \u2514\u2500\u2500 A pair (A, B) is harmonic if 1 < d(A, B) \u2264 2\n\u2514\u2500\u2500 Proposition1.1. Maximum Harmonic Pairs\n    \u2514\u2500\u2500 The maximum number of harmonic pairs is 3750\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of Set P: Define P = {(x_i, y_i) | i = 1, 2, ..., 100}",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Definition of Distance Function d: Define d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "Definition of Harmonic Pair: A pair (A, B) is harmonic if 1 < d(A, B) \u2264 2",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Maximum Harmonic Pairs: The maximum number of harmonic pairs is 3750",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2",
                    "AuxiliaryCondition1.3"
                ]
            }
        ],
        "block_tree": "To break down the given proposition into a tree-like block structure to aid in Lean4 automated proofs, we will follow the task instructions provided. Below is the structured breakdown:\n\n### Original Problem:\nProve: Let \\( P = \\{(x_i, y_i) \\mid i = 1, 2, \\ldots, 100\\} \\) be a set of 100 points on the coordinate plane. Define the distance function \\( d: P \\times P \\to \\mathbb{R} \\) by \\( d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2| \\). We say a pair of distinct points \\( (A, B) \\) is harmonic if \\( 1 < d(A, B) \\leq 2 \\). The proposition to verify is: the maximum number of harmonic pairs among these 100 points is 3750.\n\n### Proof Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Set P\n\u2502   \u2514\u2500\u2500 Define P = {(x_i, y_i) | i = 1, 2, ..., 100}\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Distance Function d\n\u2502   \u2514\u2500\u2500 Define d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of Harmonic Pair\n\u2502   \u2514\u2500\u2500 A pair (A, B) is harmonic if 1 < d(A, B) \u2264 2\n\u2514\u2500\u2500 Proposition1.1. Maximum Harmonic Pairs\n    \u2514\u2500\u2500 The maximum number of harmonic pairs is 3750\n```\n\n### JSON Objects for Each Node:\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Set P: Define P = {(x_i, y_i) | i = 1, 2, ..., 100}\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Distance Function d: Define d((x_1, y_1), (x_2, y_2)) = |x_1 - x_2| + |y_1 - y_2|\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Harmonic Pair: A pair (A, B) is harmonic if 1 < d(A, B) \u2264 2\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Maximum Harmonic Pairs: The maximum number of harmonic pairs is 3750\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\", \"AuxiliaryCondition1.3\"]\n  }\n]\n```\n\nIn this structured breakdown:\n- **Proposition1** serves as the main proposition node.\n- **Auxiliary Conditions** are used to define the set, the distance function, and the condition for a harmonic pair.\n- **Proposition1.1** is the direct task to verify the maximum number of harmonic pairs. Each node's JSON object clearly shows its dependencies, ensuring a logical flow from definitions to the final proposition."
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Polygons",
            "Mathematics -> Number Theory -> Other"
        ],
        "difficulty": 7.0,
        "problem": "Draw a $2004 \\times 2004$ array of points. What is the largest integer $n$ for which it is possible to draw a convex $n$-gon whose vertices are chosen from the points in the array?",
        "solution": "\nTo determine the largest integer \\( n \\) for which it is possible to draw a convex \\( n \\)-gon whose vertices are chosen from the points in a \\( 2004 \\times 2004 \\) array, we need to consider the properties of the convex hull and the arrangement of points.\n\nGiven the array of points, the problem can be approached by considering the number of points that can be selected such that no three points are collinear and the resulting polygon is convex. \n\nThe key insight is to use properties of coprime vectors and the Euler's totient function to construct the convex \\( n \\)-gon. By analyzing the sum of the totient function values and ensuring the convexity and non-collinearity conditions, we can determine the maximum \\( n \\).\n\nFrom the detailed analysis and construction provided, it is found that the largest \\( n \\) for which it is possible to draw a convex \\( n \\)-gon in a \\( 2004 \\times 2004 \\) array is 561.\n\nThe answer is: \\boxed{561}.",
        "answer": "561",
        "source": "usa_team_selection_test",
        "refined_statement": "---\nStep 1: Determine the Problem Type\n- The problem does not have an explicit proof goal; it is an optimizing problem.\n- The goal is to determine the largest integer \\( n \\) that allows the construction of a convex \\( n \\)-gon from the points in an array.\n- The answer is provided, indicating it is a Verification Proposition.\n\n---\nStep 2: Identify Mathematical Elements\n- Mathematical Objects:\n  - Array of points: \\( A = \\{ (i, j) \\mid 1 \\leq i \\leq 2004, \\ 1 \\leq j \\leq 2004 \\} \\).\n  - Convex \\( n \\)-gon: A polygon with \\( n \\) vertices selected from \\( A \\).\n- Properties and Relationships:\n  - Convexity: The polygon formed must be convex, meaning no internal angle exceeds 180 degrees.\n  - Non-collinearity: No three vertices are collinear.\n- Constraint Conditions:\n  - The vertices of the \\( n \\)-gon must be distinct points from the array \\( A \\).\n  - The goal is to maximize \\( n \\).\n\n---\nStep 3: Construct the Mathematical Proposition\n```latex\n\\[\n\\text{Let } A = \\{ (i, j) \\mid 1 \\leq i \\leq 2004, \\ 1 \\leq j \\leq 2004 \\} \\text{ be a } 2004 \\times 2004 \\text{ array of points.}\n\\]\n\\[\n\\text{The largest integer } n \\text{ for which it is possible to select } n \\text{ distinct points from } A \\text{ to form a convex } n\\text{-gon is } 561.\n\\]\n```",
        "latex_code": "\\[\n\\text{Let } A = \\{ (i, j) \\mid 1 \\leq i \\leq 2004, \\ 1 \\leq j \\leq 2004 \\} \\text{ be a } 2004 \\times 2004 \\text{ array of points.}\n\\]\n\\[\n\\text{The largest integer } n \\text{ for which it is possible to select } n \\text{ distinct points from } A \\text{ to form a convex } n\\text{-gon is } 561.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Convex n-gon Definition\n\u2502   \u2514\u2500\u2500 A polygon is convex if all its interior angles are less than 180 degrees.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Convex Polygon Lemmas\n\u2502   \u2514\u2500\u2500 Known lemmas about the maximum number of points forming a convex polygon in a grid.\n\u2514\u2500\u2500 Proposition1.1. Largest n-gon\n    \u251c\u2500\u2500 Proposition1.1.1. Existence of 561-gon\n    \u2502   \u2514\u2500\u2500 Demonstrate that 561 points can form a convex 561-gon.\n    \u2514\u2500\u2500 Proposition1.1.2. Impossibility of 562-gon\n        \u2514\u2500\u2500 Show that it is impossible to form a convex 562-gon.\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition: Prove that the largest n for which n distinct points can form a convex n-gon is 561.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Convex n-gon Definition: A polygon is convex if all its interior angles are less than 180 degrees.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Convex Polygon Lemmas: Known lemmas about the maximum number of points forming a convex polygon in a grid.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Largest n-gon: Prove the largest n-gon possible is 561.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.1.1",
                "type": "Proposition",
                "content": "Existence of 561-gon: Demonstrate that 561 points can form a convex 561-gon.",
                "dependencies": [
                    "Proposition1.1"
                ]
            },
            {
                "id": "Proposition1.1.2",
                "type": "Proposition",
                "content": "Impossibility of 562-gon: Show that it is impossible to form a convex 562-gon.",
                "dependencies": [
                    "Proposition1.1"
                ]
            }
        ],
        "block_tree": "To break down the given proposition into a tree-like block structure suitable for aiding in a Lean4 automated proof, we will follow the task instructions and create a hierarchical structure. Here is the decomposition and representation in both text-based tree structure and JSON format:\n\n### Problem Conditions\n\n**Definitions:**\n- **Set \\( A \\):** \\( A = \\{ (i, j) \\mid 1 \\leq i \\leq 2004, \\ 1 \\leq j \\leq 2004 \\} \\) is a \\( 2004 \\times 2004 \\) array of points.\n- **Objective:** Find the largest integer \\( n \\) for which it is possible to select \\( n \\) distinct points from \\( A \\) to form a convex \\( n \\)-gon. It is stated that this largest \\( n \\) is 561.\n\n**Goal:**\n- Prove that the largest \\( n \\) for which \\( n \\) distinct points can form a convex \\( n \\)-gon is 561.\n\n### Auxiliary Elements\n\n**Auxiliary Conditions:**\n- **Auxiliary Condition 1.1:** Definition of a convex \\( n \\)-gon.\n- **Auxiliary Condition 1.2:** Known results or lemmas about convex polygons in grid points.\n\n### Proof Tree Structure\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Convex n-gon Definition\n\u2502   \u2514\u2500\u2500 A polygon is convex if all its interior angles are less than 180 degrees.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Convex Polygon Lemmas\n\u2502   \u2514\u2500\u2500 Known lemmas about the maximum number of points forming a convex polygon in a grid.\n\u2514\u2500\u2500 Proposition1.1. Largest n-gon\n    \u251c\u2500\u2500 Proposition1.1.1. Existence of 561-gon\n    \u2502   \u2514\u2500\u2500 Demonstrate that 561 points can form a convex 561-gon.\n    \u2514\u2500\u2500 Proposition1.1.2. Impossibility of 562-gon\n        \u2514\u2500\u2500 Show that it is impossible to form a convex 562-gon.\n```\n\n### JSON Representation\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition: Prove that the largest n for which n distinct points can form a convex n-gon is 561.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Convex n-gon Definition: A polygon is convex if all its interior angles are less than 180 degrees.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Convex Polygon Lemmas: Known lemmas about the maximum number of points forming a convex polygon in a grid.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Largest n-gon: Prove the largest n-gon possible is 561.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Existence of 561-gon: Demonstrate that 561 points can form a convex 561-gon.\",\n    \"dependencies\": [\"Proposition1.1\"]\n  },\n  {\n    \"id\": \"Proposition1.1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Impossibility of 562-gon: Show that it is impossible to form a convex 562-gon.\",\n    \"dependencies\": [\"Proposition1.1\"]\n  }\n]\n```\n\nThis structured breakdown into a hierarchical format with JSON representation helps clarify the logical flow and dependencies of various components required to aid in automated proofs using Lean4."
    },
    {
        "domain": [
            "Mathematics -> Algebra -> Algebra -> Polynomial Operations",
            "Mathematics -> Number Theory -> Greatest Common Divisors (GCD)"
        ],
        "difficulty": 8.0,
        "problem": "Let $P$ be a polynomial with integer coefficients such that $P(0)=0$ and\n\\[\\gcd(P(0), P(1), P(2), \\ldots ) = 1.\\]\nShow there are infinitely many $n$ such that\n\\[\\gcd(P(n)- P(0), P(n+1)-P(1), P(n+2)-P(2), \\ldots) = n.\\]",
        "solution": "\nLet \\( P \\) be a polynomial with integer coefficients such that \\( P(0) = 0 \\) and\n\\[\n\\gcd(P(0), P(1), P(2), \\ldots ) = 1.\n\\]\nWe need to show that there are infinitely many \\( n \\) such that\n\\[\n\\gcd(P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots) = n.\n\\]\n\nConsider the polynomial \\( P(x) = x^k Q(x) \\), where \\( Q(0) \\neq 0 \\). We claim that if \\( n = p^k \\) for any prime \\( p \\) not dividing \\( k Q(1) + Q'(1) \\), then \\( n \\) will satisfy the conditions of the problem.\n\nIt is clear that \\( p^k \\mid P(p^k + i) - P(i) \\) for all \\( i \\), hence \\( p^k \\mid \\gcd(P(p^k + i) - P(0), P(p^k + 1) - P(1), P(p^k + 2) - P(2), \\ldots) \\). We now claim that \\( p^{k+1} \\nmid P(p^k + 1) - P(1) \\). Let \\( Q(x) = \\sum_{i=0}^m c_i x^i \\), then\n\\[\n\\begin{align*}\nP(p^k + 1) - P(1) &= (p^k + 1)^k Q(p^k + 1) - Q(1) \\\\\n&= \\left( \\sum_{i=0}^k \\binom{k}{i} (p^k)^i \\right) Q(p^k + 1) - Q(1) \\\\\n&\\equiv (k p^k + 1) Q(p^k + 1) - Q(1) \\\\\n&= k p^k Q(p^k + 1) + (Q(p^k + 1) - Q(1)) \\\\\n&= k p^k Q(p^k + 1) + \\sum_{i=0}^m c_i ((p^k + 1)^i - 1^i) \\\\\n&= k p^k Q(p^k + 1) + \\sum_{i=0}^m c_i \\left(-1 + \\sum_{j=0}^i \\binom{i}{j} (p^k)^j \\right) \\\\\n&\\equiv k p^k Q(p^k + 1) + \\sum_{i=0}^m i c_i p^k \\\\\n&= p^k (k Q(p^k + 1) + Q'(1)) \\pmod{p^{k+1}}.\n\\end{align*}\n\\]\nThus,\n\\[\n\\frac{P(p^k + 1) - P(1)}{p^k} = k Q(p^k + 1) + Q'(1) \\equiv k Q(1) + Q'(1) \\not\\equiv 0 \\pmod{p},\n\\]\nso \\( p^k \\) fully divides \\( \\gcd(P(p^k + i) - P(0), P(p^k + 1) - P(1), P(p^k + 2) - P(2), \\ldots) \\).\n\nTo show that no other prime \\( q \\neq p \\) divides each of \\( P(p^k) - P(0), P(p^k + 1) - P(1), P(p^k + 2) - P(2), \\ldots \\), suppose for contradiction that \\( q \\mid P(p^k + i) - P(i) \\) for all positive integers \\( i \\). Observing that \\( q \\mid P(q + i) - P(i) \\), we find that \\( P(i + ap^k + bq) \\equiv P(i) \\pmod{q} \\) for all integers \\( a \\) and \\( b \\). Since \\( \\gcd(p^k, q) = 1 \\), we can choose \\( a \\) and \\( b \\) such that \\( ap^k + bq = 1 \\), yielding \\( q \\mid P(i + 1) - P(i) \\) for all \\( i \\). But \\( q \\mid P(0) = 0 \\), so \\( q \\mid P(i) \\) for all nonnegative \\( i \\), which contradicts the hypothesis.\n\nTherefore, there are infinitely many \\( n \\) such that\n\\[\n\\gcd(P(n) - P(0), P(n + 1) - P(1), P(n + 2) - P(2), \\ldots) = n.\n\\]\n\nThe answer is: \\boxed{\\text{infinitely many } n}.",
        "answer": "\\text{infinitely many } n",
        "source": "usa_team_selection_test",
        "refined_statement": "To refine the given problem into a standard LaTeX-formatted mathematical proposition, let's follow the specified processing steps.\n\n---\n\n**Step 1: Determine the Problem Type**\n\n- The problem has an explicit proof goal.\n- It is a Verification Proposition, asserting a particular mathematical property holds true for infinitely many integers \\( n \\).\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Polynomial: \\( P(x) \\) with integer coefficients.\n  - Integer sequence: \\( P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots \\).\n\n- **Properties and Relationships:**\n  - \\( P(0) = 0 \\).\n  - \\( \\gcd(P(0), P(1), P(2), \\ldots) = 1 \\).\n\n- **Constraint Conditions:**\n  - For infinitely many \\( n \\), the condition \\( \\gcd(P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots) = n \\) must hold.\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\nUsing the elements identified, we can construct the mathematical proposition in LaTeX format:\n\n```latex\n\\[\n\\text{Let } P(x) \\text{ be a polynomial with integer coefficients such that } P(0) = 0 \\text{ and }\n\\gcd(P(0), P(1), P(2), \\ldots) = 1.\n\\]\n\\[\n\\text{Then, there exist infinitely many integers } n \\text{ such that }\n\\gcd(P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots) = n.\n\\]\n```\n\nThis refined statement asserts the existence of infinitely many \\( n \\) such that the given gcd condition holds, thus completing the verification proposition.",
        "latex_code": "\\[\n\\text{Let } P(x) \\text{ be a polynomial with integer coefficients such that } P(0) = 0 \\text{ and }\n\\gcd(P(0), P(1), P(2), \\ldots) = 1.\n\\]\n\\[\n\\text{Then, there exist infinitely many integers } n \\text{ such that }\n\\gcd(P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots) = n.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Polynomial P\n\u2502   \u2514\u2500\u2500 Define P(x) as a polynomial with integer coefficients\n\u251c\u2500\u2500 Auxiliary Condition1.2. Initial Condition\n\u2502   \u2514\u2500\u2500 P(0) = 0\n\u251c\u2500\u2500 Auxiliary Condition1.3. GCD Condition\n\u2502   \u2514\u2500\u2500 gcd(P(0), P(1), P(2), ...) = 1\n\u251c\u2500\u2500 Proposition2. Existence of Infinitely Many Integers n\n\u2502   \u251c\u2500\u2500 Case1. Case 1: n = 1\n\u2502   \u2502   \u2514\u2500\u2500 Proposition2.1.1. gcd(P(1) - P(0), P(2) - P(1), ...) = 1\n\u2502   \u251c\u2500\u2500 Case2. Case 2: n is a prime number\n\u2502   \u2502   \u251c\u2500\u2500 Sub-Case2.1. Sub-Case 2.1: n divides P(n)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Proposition2.2.1. gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\n\u2502   \u2502   \u2514\u2500\u2500 Sub-Case2.2. Sub-Case 2.2: n does not divide P(n)\n\u2502   \u2502       \u2514\u2500\u2500 Proposition2.2.2. Adjustment of coefficients\n\u2502   \u2514\u2500\u2500 Case3. Case 3: General n\n\u2502       \u251c\u2500\u2500 Sub-Case3.1. Sub-Case 3.1: n divides P(n)\n\u2502       \u2502   \u2514\u2500\u2500 Proposition2.3.1. gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\n\u2502       \u2514\u2500\u2500 Sub-Case3.2. Sub-Case 3.2: n does not divide P(n)\n\u2502           \u2514\u2500\u2500 Proposition2.3.2. Use of auxiliary results for adjustment\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of Polynomial P: Define P(x) as a polynomial with integer coefficients",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Initial Condition: P(0) = 0",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "GCD Condition: gcd(P(0), P(1), P(2), ...) = 1",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition2",
                "type": "Proposition",
                "content": "Existence of Infinitely Many Integers n",
                "dependencies": [
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2",
                    "AuxiliaryCondition1.3"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Case 1: n = 1",
                "dependencies": [
                    "Proposition2"
                ]
            },
            {
                "id": "Proposition2.1.1",
                "type": "Proposition",
                "content": "gcd(P(1) - P(0), P(2) - P(1), ...) = 1",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "Case 2: n is a prime number",
                "dependencies": [
                    "Proposition2"
                ]
            },
            {
                "id": "Sub-Case2.1",
                "type": "Sub-Case",
                "content": "Sub-Case 2.1: n divides P(n)",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.2.1",
                "type": "Proposition",
                "content": "gcd(P(n) - P(0), P(n+1) - P(1), ...) = n",
                "dependencies": [
                    "Sub-Case2.1"
                ]
            },
            {
                "id": "Sub-Case2.2",
                "type": "Sub-Case",
                "content": "Sub-Case 2.2: n does not divide P(n)",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.2.2",
                "type": "Proposition",
                "content": "Adjustment of coefficients",
                "dependencies": [
                    "Sub-Case2.2"
                ]
            },
            {
                "id": "Case3",
                "type": "Case",
                "content": "Case 3: General n",
                "dependencies": [
                    "Proposition2"
                ]
            },
            {
                "id": "Sub-Case3.1",
                "type": "Sub-Case",
                "content": "Sub-Case 3.1: n divides P(n)",
                "dependencies": [
                    "Case3"
                ]
            },
            {
                "id": "Proposition2.3.1",
                "type": "Proposition",
                "content": "gcd(P(n) - P(0), P(n+1) - P(1), ...) = n",
                "dependencies": [
                    "Sub-Case3.1"
                ]
            },
            {
                "id": "Sub-Case3.2",
                "type": "Sub-Case",
                "content": "Sub-Case 3.2: n does not divide P(n)",
                "dependencies": [
                    "Case3"
                ]
            },
            {
                "id": "Proposition2.3.2",
                "type": "Proposition",
                "content": "Use of auxiliary results for adjustment",
                "dependencies": [
                    "Sub-Case3.2"
                ]
            }
        ],
        "block_tree": "Original Problem:\nProve: Let \\( P(x) \\) be a polynomial with integer coefficients such that \\( P(0) = 0 \\) and \\(\\gcd(P(0), P(1), P(2), \\ldots) = 1\\). Then, there exist infinitely many integers \\( n \\) such that \\(\\gcd(P(n) - P(0), P(n+1) - P(1), P(n+2) - P(2), \\ldots) = n\\).\n\nProof Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Polynomial P\n\u2502   \u2514\u2500\u2500 Define P(x) as a polynomial with integer coefficients\n\u251c\u2500\u2500 Auxiliary Condition1.2. Initial Condition\n\u2502   \u2514\u2500\u2500 P(0) = 0\n\u251c\u2500\u2500 Auxiliary Condition1.3. GCD Condition\n\u2502   \u2514\u2500\u2500 gcd(P(0), P(1), P(2), ...) = 1\n\u251c\u2500\u2500 Proposition2. Existence of Infinitely Many Integers n\n\u2502   \u251c\u2500\u2500 Case1. Case 1: n = 1\n\u2502   \u2502   \u2514\u2500\u2500 Proposition2.1.1. gcd(P(1) - P(0), P(2) - P(1), ...) = 1\n\u2502   \u251c\u2500\u2500 Case2. Case 2: n is a prime number\n\u2502   \u2502   \u251c\u2500\u2500 Sub-Case2.1. Sub-Case 2.1: n divides P(n)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Proposition2.2.1. gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\n\u2502   \u2502   \u2514\u2500\u2500 Sub-Case2.2. Sub-Case 2.2: n does not divide P(n)\n\u2502   \u2502       \u2514\u2500\u2500 Proposition2.2.2. Adjustment of coefficients\n\u2502   \u2514\u2500\u2500 Case3. Case 3: General n\n\u2502       \u251c\u2500\u2500 Sub-Case3.1. Sub-Case 3.1: n divides P(n)\n\u2502       \u2502   \u2514\u2500\u2500 Proposition2.3.1. gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\n\u2502       \u2514\u2500\u2500 Sub-Case3.2. Sub-Case 3.2: n does not divide P(n)\n\u2502           \u2514\u2500\u2500 Proposition2.3.2. Use of auxiliary results for adjustment\n```\n\nJSON Objects for Each Node:\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Polynomial P: Define P(x) as a polynomial with integer coefficients\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Initial Condition: P(0) = 0\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"GCD Condition: gcd(P(0), P(1), P(2), ...) = 1\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Existence of Infinitely Many Integers n\",\n    \"dependencies\": [\"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\", \"AuxiliaryCondition1.3\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Case 1: n = 1\",\n    \"dependencies\": [\"Proposition2\"]\n  },\n  {\n    \"id\": \"Proposition2.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"gcd(P(1) - P(0), P(2) - P(1), ...) = 1\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"Case 2: n is a prime number\",\n    \"dependencies\": [\"Proposition2\"]\n  },\n  {\n    \"id\": \"Sub-Case2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 2.1: n divides P(n)\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.2.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\",\n    \"dependencies\": [\"Sub-Case2.1\"]\n  },\n  {\n    \"id\": \"Sub-Case2.2\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 2.2: n does not divide P(n)\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.2.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Adjustment of coefficients\",\n    \"dependencies\": [\"Sub-Case2.2\"]\n  },\n  {\n    \"id\": \"Case3\",\n    \"type\": \"Case\",\n    \"content\": \"Case 3: General n\",\n    \"dependencies\": [\"Proposition2\"]\n  },\n  {\n    \"id\": \"Sub-Case3.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 3.1: n divides P(n)\",\n    \"dependencies\": [\"Case3\"]\n  },\n  {\n    \"id\": \"Proposition2.3.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"gcd(P(n) - P(0), P(n+1) - P(1), ...) = n\",\n    \"dependencies\": [\"Sub-Case3.1\"]\n  },\n  {\n    \"id\": \"Sub-Case3.2\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 3.2: n does not divide P(n)\",\n    \"dependencies\": [\"Case3\"]\n  },\n  {\n    \"id\": \"Proposition2.3.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Use of auxiliary results for adjustment\",\n    \"dependencies\": [\"Sub-Case3.2\"]\n  }\n]\n```"
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Polygons"
        ],
        "difficulty": 6.0,
        "problem": "Let $P$ be a regular $n$-gon $A_1A_2\\ldots A_n$. Find all positive integers $n$ such that for each permutation $\\sigma (1),\\sigma (2),\\ldots ,\\sigma (n)$ there exists $1\\le i,j,k\\le n$ such that the triangles $A_{i}A_{j}A_{k}$ and $A_{\\sigma (i)}A_{\\sigma (j)}A_{\\sigma (k)}$ are both acute, both right or both obtuse.",
        "solution": "\nLet \\( P \\) be a regular \\( n \\)-gon \\( A_1A_2\\ldots A_n \\). We aim to find all positive integers \\( n \\) such that for each permutation \\( \\sigma(1), \\sigma(2), \\ldots, \\sigma(n) \\), there exists \\( 1 \\le i, j, k \\le n \\) such that the triangles \\( A_iA_jA_k \\) and \\( A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\) are both acute, both right, or both obtuse.\n\nConsider first a regular \\( 2n \\)-gon for \\( n \\ge 2 \\). Let \\( A_i \\) and \\( A_j \\) be two vertices which are diametrically opposite. If \\( A_{\\sigma(i)} \\) and \\( A_{\\sigma(j)} \\) are still diametrically opposite, then any third vertex \\( A_k \\) will work since \\( \\angle A_iA_kA_j = 90^\\circ = \\angle A_{\\sigma(i)}A_{\\sigma(k)}A_{\\sigma(j)} \\).\n\nOtherwise, let \\( A_k \\) be the vertex such that \\( A_{\\sigma(k)} \\) is diametrically opposite to \\( A_{\\sigma(i)} \\). Then \\( \\angle A_iA_kA_j = 90^\\circ = \\angle A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\). Note that this is trivially true for an equilateral triangle, but it is false for a regular pentagon (consider \\( ABCDE \\) and \\( A'D'B'E'C' \\)).\n\nConsider now a regular \\( 2n+1 \\)-gon for \\( n \\ge 3 \\). Clearly, there are no right triangles. The number of obtuse triangles with a particular diagonal as the longest side is equal to the number of vertices between the endpoints of this diagonal, going the shorter way.\n\nSince there are \\( 2n+1 \\) diagonals of each length, the total number of obtuse triangles is \n\\[\n(2n+1)\\sum_{i=1}^{n-1} i = \\frac{1}{2}(n-1)n(2n+1).\n\\]\nThe total number of triangles is \n\\[\n\\binom{2n+1}{3} = \\frac{1}{3}(2n-1)n(2n+1).\n\\]\nSince \n\\[\n\\frac{\\frac{1}{2}(n-1)}{\\frac{1}{3}(2n-1)} = \\frac{1}{2} + \\frac{n-2}{4n-2} > \\frac{1}{2}\n\\]\nfor \\( n \\ge 3 \\), there are more obtuse triangles than acute ones. By the pigeonhole principle, there exist 3 vertices such that their initial and permuted positions both determine obtuse triangles.\n\nTherefore, the property holds for all \\( n \\) except \\( n = 5 \\).\n\nThe answer is: \\boxed{n \\neq 5}.",
        "answer": "n \\neq 5",
        "source": "china_national_olympiad",
        "refined_statement": "---\nStep 1: Determine the Problem Type\n- The problem has an explicit proof goal.\n- It is a Verification Proposition, asserting that a certain conclusion holds true for all positive integers \\( n \\) except for \\( n = 5 \\).\n\n---\nStep 2: Identify Mathematical Elements\n- Mathematical Objects:\n  - Regular \\( n \\)-gon: \\( P = A_1A_2\\ldots A_n \\).\n  - Permutation of vertices: \\(\\sigma(1), \\sigma(2), \\ldots, \\sigma(n)\\).\n  - Triangles formed by vertices: \\( A_iA_jA_k \\) and \\( A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\).\n\n- Properties and Relationships:\n  - The triangle types considered: acute, right, and obtuse.\n  - The relationship of being diametrically opposite in a regular \\( n \\)-gon.\n  - The number of obtuse triangles compared to the number of acute triangles for \\( n \\)-gons.\n\n- Constraint Conditions:\n  - For all permutations of vertices, there must exist some indices \\( i, j, k \\) such that both triangles are of the same type (acute, right, or obtuse).\n  - The property must hold for all positive integers \\( n \\) except \\( n = 5 \\).\n\n---\nStep 3: Construct the Mathematical Proposition\n```latex\n\\[\n\\forall n \\in \\mathbb{Z}^+, n \\neq 5, \\forall \\sigma \\in S_n, \\exists 1 \\leq i, j, k \\leq n, \\text{ such that the triangles } A_iA_jA_k \\text{ and } A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\text{ are both acute, both right, or both obtuse.}\n\\]\n```\n\nThis proposition states that for any positive integer \\( n \\) except \\( n = 5 \\), and for any permutation of the vertices of a regular \\( n \\)-gon, there exist indices \\( i, j, k \\) such that the triangles formed by these indices in both the original and permuted vertex sequences are of the same type.",
        "latex_code": "\\[\n\\forall n \\in \\mathbb{Z}^+, n \\neq 5, \\forall \\sigma \\in S_n, \\exists 1 \\leq i, j, k \\leq n, \\text{ such that the triangles } A_iA_jA_k \\text{ and } A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\text{ are both acute, both right, or both obtuse.}\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Symmetric Group\n\u2502   \u2514\u2500\u2500 Define \\( \\sigma \\in S_n \\) as a permutation of \\(\\{1, 2, \\ldots, n\\}\\)\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Triangle Types\n\u2502   \u251c\u2500\u2500 Acute Triangle: All angles < 90\u00b0\n\u2502   \u251c\u2500\u2500 Right Triangle: One angle = 90\u00b0\n\u2502   \u2514\u2500\u2500 Obtuse Triangle: One angle > 90\u00b0\n\u251c\u2500\u2500 Case1. Case 1: n < 5\n\u2502   \u2514\u2500\u2500 Proposition1.1. For \\( n < 5 \\), condition holds trivially.\n\u2514\u2500\u2500 Case2. Case 2: n > 5\n    \u251c\u2500\u2500 Sub-Case2.1. Sub-Case 2.1: n is odd\n    \u2502   \u2514\u2500\u2500 Proposition2.1. There exist i, j, k such that triangles are of the same type.\n    \u2514\u2500\u2500 Sub-Case2.2. Sub-Case 2.2: n is even, n \u2260 5\n        \u2514\u2500\u2500 Proposition2.2. There exist i, j, k such that triangles are of the same type.\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "For every positive integer n \u2260 5 and every permutation \u03c3 in S_n, there exist indices 1 \u2264 i, j, k \u2264 n such that the triangles A_iA_jA_k and A_\u03c3(i)A_\u03c3(j)A_\u03c3(k) are both acute, both right, or both obtuse.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Define \u03c3 \u2208 S_n as a permutation of {1, 2, ..., n}.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Definition of Triangle Types: Acute Triangle (all angles < 90\u00b0), Right Triangle (one angle = 90\u00b0), Obtuse Triangle (one angle > 90\u00b0).",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Case 1: n < 5",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "For n < 5, the condition holds trivially.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "Case 2: n > 5",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Sub-Case2.1",
                "type": "Sub-Case",
                "content": "Sub-Case 2.1: n is odd",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.1",
                "type": "Proposition",
                "content": "There exist i, j, k such that triangles are of the same type.",
                "dependencies": [
                    "Sub-Case2.1"
                ]
            },
            {
                "id": "Sub-Case2.2",
                "type": "Sub-Case",
                "content": "Sub-Case 2.2: n is even, n \u2260 5",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.2",
                "type": "Proposition",
                "content": "There exist i, j, k such that triangles are of the same type.",
                "dependencies": [
                    "Sub-Case2.2"
                ]
            }
        ],
        "block_tree": "To decompose the given mathematical proposition into a structured tree-like format with JSON fields, we will follow the provided task instructions. Below is the breakdown:\n\n### Statement:\nProve: For every positive integer \\( n \\neq 5 \\) and every permutation \\( \\sigma \\) in the symmetric group \\( S_n \\), there exist indices \\( 1 \\leq i, j, k \\leq n \\) such that the triangles \\( A_iA_jA_k \\) and \\( A_{\\sigma(i)}A_{\\sigma(j)}A_{\\sigma(k)} \\) are both acute, both right, or both obtuse.\n\n### Proof Structure:\n\n#### Text-Based Tree Structure:\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of Symmetric Group\n\u2502   \u2514\u2500\u2500 Define \\( \\sigma \\in S_n \\) as a permutation of \\(\\{1, 2, \\ldots, n\\}\\)\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of Triangle Types\n\u2502   \u251c\u2500\u2500 Acute Triangle: All angles < 90\u00b0\n\u2502   \u251c\u2500\u2500 Right Triangle: One angle = 90\u00b0\n\u2502   \u2514\u2500\u2500 Obtuse Triangle: One angle > 90\u00b0\n\u251c\u2500\u2500 Case1. Case 1: n < 5\n\u2502   \u2514\u2500\u2500 Proposition1.1. For \\( n < 5 \\), condition holds trivially.\n\u2514\u2500\u2500 Case2. Case 2: n > 5\n    \u251c\u2500\u2500 Sub-Case2.1. Sub-Case 2.1: n is odd\n    \u2502   \u2514\u2500\u2500 Proposition2.1. There exist i, j, k such that triangles are of the same type.\n    \u2514\u2500\u2500 Sub-Case2.2. Sub-Case 2.2: n is even, n \u2260 5\n        \u2514\u2500\u2500 Proposition2.2. There exist i, j, k such that triangles are of the same type.\n```\n\n#### JSON Objects for Each Node:\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"For every positive integer n \u2260 5 and every permutation \u03c3 in S_n, there exist indices 1 \u2264 i, j, k \u2264 n such that the triangles A_iA_jA_k and A_\u03c3(i)A_\u03c3(j)A_\u03c3(k) are both acute, both right, or both obtuse.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Define \u03c3 \u2208 S_n as a permutation of {1, 2, ..., n}.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of Triangle Types: Acute Triangle (all angles < 90\u00b0), Right Triangle (one angle = 90\u00b0), Obtuse Triangle (one angle > 90\u00b0).\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Case 1: n < 5\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"For n < 5, the condition holds trivially.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"Case 2: n > 5\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Sub-Case2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 2.1: n is odd\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"There exist i, j, k such that triangles are of the same type.\",\n    \"dependencies\": [\"Sub-Case2.1\"]\n  },\n  {\n    \"id\": \"Sub-Case2.2\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Sub-Case 2.2: n is even, n \u2260 5\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"There exist i, j, k such that triangles are of the same type.\",\n    \"dependencies\": [\"Sub-Case2.2\"]\n  }\n]\n```\n\nThis breakdown creates a clear structure, allowing each part of the proposition to be tackled sequentially while maintaining the logical dependencies necessary for a formal proof."
    },
    {
        "domain": [
            "Mathematics -> Applied Mathematics -> Statistics -> Probability -> Counting Methods -> Combinations"
        ],
        "difficulty": 8.0,
        "problem": "Given positive integers $n$ and $k$, $n > k^2 >4.$ In a $n \\times n$ grid, a $k$[i]-group[/i] is a set of $k$ unit squares lying in different rows and different columns.\nDetermine the maximal possible $N$, such that one can choose $N$ unit squares in the grid and color them, with the following condition holds: in any $k$[i]-group[/i] from the colored $N$ unit squares, there are two squares with the same color, and there are also two squares with different colors.",
        "solution": "\nGiven positive integers \\( n \\) and \\( k \\) such that \\( n > k^2 > 4 \\), we aim to determine the maximal possible \\( N \\) such that one can choose \\( N \\) unit squares in an \\( n \\times n \\) grid and color them, with the condition that in any \\( k \\)-group from the colored \\( N \\) unit squares, there are two squares with the same color and two squares with different colors.\n\nThe maximal possible \\( N \\) is:\n\\[\nN = n(k-1)^2.\n\\]\n\nThe answer is: \\boxed{n(k-1)^2}.",
        "answer": "n(k-1)^2",
        "source": "china_team_selection_test",
        "refined_statement": "---\n\n**Step 1: Determine the Problem Type**\n\n- The problem is an optimizing problem, seeking the maximum number of unit squares \\( N \\) that can be chosen and colored under certain conditions.\n- The answer is provided, making it a Verification Proposition, as it asserts that the determined value of \\( N \\) satisfies the given conditions.\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Grid: \\( G = \\{ (i, j) \\mid 1 \\leq i, j \\leq n \\} \\).\n  - Colored squares: Subset \\( C \\subseteq G \\) with \\( |C| = N \\).\n  - Colors: A coloring function \\( f: C \\rightarrow \\{1, 2, \\ldots, c\\} \\), where \\( c \\) is the number of colors used.\n\n- **Properties and Relationships:**\n  - A \\( k \\)-group is a set of \\( k \\) unit squares, each from different rows and columns.\n  - In each \\( k \\)-group from the set of colored squares \\( C \\), there exist two squares with the same color and two squares with different colors.\n\n- **Constraint Conditions:**\n  - \\( n > k^2 > 4 \\).\n  - Each \\( k \\)-group must satisfy the coloring condition: at least two squares have the same color and at least two squares have different colors.\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\n```latex\n\\[\n\\begin{array}{l}\n\\text{Given positive integers } n \\text{ and } k \\text{ such that } n > k^2 > 4, \\text{ in an } n \\times n \\text{ grid}, \\\\\n\\text{determine the maximal possible } N \\text{ such that one can choose } N \\text{ unit squares } \\\\\n\\text{and color them with a function } f: C \\rightarrow \\{1, 2, \\ldots, c\\}, \\text{ where } C \\subseteq G \\text{ and } |C| = N, \\\\\n\\text{such that in any } k\\text{-group from the colored } N \\text{ unit squares, there are two squares} \\\\\n\\text{with the same color and two squares with different colors.} \\\\\n\\text{The maximal possible } N \\text{ is } N = n(k-1)^2.\n\\end{array}\n\\]\n```",
        "latex_code": "\\[\n\\begin{array}{l}\n\\text{Given positive integers } n \\text{ and } k \\text{ such that } n > k^2 > 4, \\text{ in an } n \\times n \\text{ grid}, \\\\\n\\text{determine the maximal possible } N \\text{ such that one can choose } N \\text{ unit squares } \\\\\n\\text{and color them with a function } f: C \\rightarrow \\{1, 2, \\ldots, c\\}, \\text{ where } C \\subseteq G \\text{ and } |C| = N, \\\\\n\\text{such that in any } k\\text{-group from the colored } N \\text{ unit squares, there are two squares} \\\\\n\\text{with the same color and two squares with different colors.} \\\\\n\\text{The maximal possible } N \\text{ is } N = n(k-1)^2.\n\\end{array}\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of k-group\n\u2502   \u2514\u2500\u2500 Contains k unit squares.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Combinatorial Lemmas\n\u2502   \u2514\u2500\u2500 Utilize known lemmas for maximizing N.\n\u251c\u2500\u2500 Auxiliary Condition1.3. Constraints\n\u2502   \u2514\u2500\u2500 n > k^2 > 4.\n\u2514\u2500\u2500 Proposition1.1. Maximal N Value\n    \u251c\u2500\u2500 Proposition1.1.1. Existence of N\n    \u2502   \u2514\u2500\u2500 N = n(k-1)^2 satisfies the coloring condition.\n    \u2514\u2500\u2500 Proposition1.1.2. Coloring Strategy\n        \u2514\u2500\u2500 Strategy to achieve N = n(k-1)^2.\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition: Determine the maximal possible N.",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of k-group: Contains k unit squares.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Combinatorial Lemmas: Utilize known lemmas for maximizing N.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "Constraints: n > k^2 > 4.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Maximal N Value: N = n(k-1)^2.",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2",
                    "AuxiliaryCondition1.3"
                ]
            },
            {
                "id": "Proposition1.1.1",
                "type": "Proposition",
                "content": "Existence of N: N = n(k-1)^2 satisfies the coloring condition.",
                "dependencies": [
                    "Proposition1.1"
                ]
            },
            {
                "id": "Proposition1.1.2",
                "type": "Proposition",
                "content": "Coloring Strategy: Strategy to achieve N = n(k-1)^2.",
                "dependencies": [
                    "Proposition1.1"
                ]
            }
        ],
        "block_tree": "To decompose the given proposition into a tree-like Block Structure, we'll follow the outlined steps to create a comprehensive breakdown and JSON representation for each node.\n\n### Problem Conditions\n\n1. **Definitions:**\n   - **Grid \\( G \\):** An \\( n \\times n \\) grid where \\( n \\) is a positive integer.\n   - **Function \\( f \\):** Defines a coloring function \\( f: C \\rightarrow \\{1, 2, \\ldots, c\\} \\), where \\( C \\subseteq G \\) and \\( |C| = N \\).\n   - **\\( k \\)-group:** A set of \\( k \\) unit squares from the colored \\( N \\) unit squares.\n   - **Objective:** Determine the maximal possible \\( N \\) such that in any \\( k \\)-group, there are two squares with the same color and two squares with different colors.\n\n2. **Goal:**\n   - Prove that the maximal possible \\( N \\) is \\( N = n(k-1)^2 \\).\n\n### Auxiliary Elements\n\n- **Auxiliary Condition 1.1:** Definition of \\( k \\)-group properties.\n- **Auxiliary Condition 1.2:** Known combinatorial lemmas that might apply.\n- **Auxiliary Condition 1.3:** Constraints \\( n > k^2 > 4 \\).\n\n### Decompose the Proof into Blocks\n\n#### Proof Tree Structure\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of k-group\n\u2502   \u2514\u2500\u2500 Contains k unit squares.\n\u251c\u2500\u2500 Auxiliary Condition1.2. Combinatorial Lemmas\n\u2502   \u2514\u2500\u2500 Utilize known lemmas for maximizing N.\n\u251c\u2500\u2500 Auxiliary Condition1.3. Constraints\n\u2502   \u2514\u2500\u2500 n > k^2 > 4.\n\u2514\u2500\u2500 Proposition1.1. Maximal N Value\n    \u251c\u2500\u2500 Proposition1.1.1. Existence of N\n    \u2502   \u2514\u2500\u2500 N = n(k-1)^2 satisfies the coloring condition.\n    \u2514\u2500\u2500 Proposition1.1.2. Coloring Strategy\n        \u2514\u2500\u2500 Strategy to achieve N = n(k-1)^2.\n```\n\n### JSON Objects for Each Node\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition: Determine the maximal possible N.\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of k-group: Contains k unit squares.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Combinatorial Lemmas: Utilize known lemmas for maximizing N.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Constraints: n > k^2 > 4.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Maximal N Value: N = n(k-1)^2.\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\", \"AuxiliaryCondition1.3\"]\n  },\n  {\n    \"id\": \"Proposition1.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Existence of N: N = n(k-1)^2 satisfies the coloring condition.\",\n    \"dependencies\": [\"Proposition1.1\"]\n  },\n  {\n    \"id\": \"Proposition1.1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Coloring Strategy: Strategy to achieve N = n(k-1)^2.\",\n    \"dependencies\": [\"Proposition1.1\"]\n  }\n]\n```\n\nThis structured breakdown presents the logical decomposition of the problem into blocks and auxiliary conditions necessary for understanding and proving the statement using Lean4."
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Other",
            "Mathematics -> Applied Mathematics -> Probability -> Other"
        ],
        "difficulty": 8.0,
        "problem": "Find a real number $t$ such that for any set of 120 points $P_1, \\ldots P_{120}$ on the boundary of a unit square, there exists a point $Q$ on this boundary with $|P_1Q| + |P_2Q| + \\cdots + |P_{120}Q| = t$.",
        "solution": "\nWe need to find a real number \\( t \\) such that for any set of 120 points \\( P_1, \\ldots, P_{120} \\) on the boundary of a unit square, there exists a point \\( Q \\) on this boundary with \\( |P_1Q| + |P_2Q| + \\cdots + |P_{120}Q| = t \\).\n\nDefine \\(\\mathcal{U}\\) to be a set of points \\( P_1, \\ldots, P_{120} \\) on the boundary of a unit square. Define \\( g_{\\mathcal{U}}(Q) = \\sum_{i=1}^{120} |QP_i| \\).\n\n**Lemma 1:** The set \\(\\{g_{\\mathcal{U}}(Q) : Q \\in \\mathcal{U}\\}\\) is a closed interval \\( I_{\\mathcal{U}} \\).\n\n*Proof:* Clearly, \\( g_{\\mathcal{U}}(Q) \\) is bounded above and below over \\( Q \\in \\mathcal{U} \\), and it is continuous in both \\( x \\) and \\( y \\) coordinates if we place it in the Cartesian plane. Combining these two implies the set of values is an interval. \\(\\blacksquare\\)\n\n**Lemma 2:** Given a finite set of closed intervals, they all intersect if and only if every two intersect.\n\nWe want to show that the intervals \\( I_{\\mathcal{U}} \\) all intersect over all sets of 120 points \\(\\mathcal{U}\\). By Lemma 2, it suffices to check that every two intersect. Suppose for the sake of contradiction that there exists some \\(\\mathcal{U} = \\{P_1, \\ldots, P_{120}\\}\\) and \\(\\mathcal{U}' = \\{P_1', \\ldots, P_{120}'\\}\\) such that \\( I_{\\mathcal{U}} \\) is entirely before \\( I_{\\mathcal{U}'} \\). The key is that now\n\\[ \ng_{\\mathcal{U}}(Q) < g_{\\mathcal{U}'}(Q') \\quad \\text{for all } Q \\in \\mathcal{U} \\text{ and } Q' \\in \\mathcal{U}' \\quad (\\spadesuit).\n\\]\nLet \\( C_1, C_2, C_3, C_4 \\) be the corners of the unit square \\(\\mathcal{U}\\) and \\( M_1', M_2', M_3', M_4' \\) the midpoints of the four sides of the unit square \\(\\mathcal{U}'\\). Summing four bounds appearing from \\((\\spadesuit)\\):\n\\[ \ng_{\\mathcal{U}}(C_1) + \\cdots + g_{\\mathcal{U}}(C_4) < g_{\\mathcal{U}'}(M_1) + \\cdots + g_{\\mathcal{U}'}(M_4) \\quad (\\clubsuit).\n\\]\nThe key is that we can compute and bound each of the above since they become sums of functions of a single point \\( P_i \\) relative to the fixed unit square, instead of about the entire set of \\( P_i \\)'s. In particular,\n\\[\n\\begin{align*}\ng_{\\mathcal{U}}(C_1) + \\cdots + g_{\\mathcal{U}}(C_4) &= \\sum_{j=1}^4 \\sum_{i=1}^{120} |C_jP_i| \\\\\n&= \\sum_{i=1}^{120} |C_1P_i| + |C_2P_i| + |C_3P_i| + |C_4P_i| \\\\\n&\\ge \\sum_{i=1}^{120} (1 + \\sqrt{5}) \\\\\n&= 120(1 + \\sqrt{5}).\n\\end{align*}\n\\]\nThe second step above followed by switching the order of summation. The third step since we can confirm with coordinates that the minimum \\( |C_1P| + |C_2P| + |C_3P| + |C_4P| \\) over \\( P \\) on the boundary occurs is \\( 1 + \\sqrt{5} \\), and occurs when \\( P \\) is the midpoint of a side. Now similarly,\n\\[\n\\begin{align*}\ng_{\\mathcal{U}}(M_1') + \\cdots + g_{\\mathcal{U}}(M_4') &= \\sum_{j=1}^4 \\sum_{i=1}^{120} |M_j'P_i'| \\\\\n&= \\sum_{i=1}^{120} |M_1'P_i'| + |M_2'P_i'| + |M_3'P_i'| + |M_4'P_i'| \\\\\n&\\le \\sum_{i=1}^{120} (1 + \\sqrt{5}) \\\\\n&= 120(1 + \\sqrt{5}).\n\\end{align*}\n\\]\nThe third step since we can confirm with coordinates that the maximum \\( |M_1P| + |M_2P| + |M_3P| + |M_4P| \\) over \\( P \\) on the boundary is \\( 1 + \\sqrt{5} \\), and occurs when \\( P \\) is a corner.\n\nHowever, combining these two bounds contradicts \\((\\clubsuit)\\)! Therefore, such a \\( t \\) exists. In particular, we can show \\( t = 30(1 + \\sqrt{5}) \\) by proving that \\( t < 30(1 + \\sqrt{5}) \\) fails from the corners bound and \\( t > 30(1 + \\sqrt{5}) \\) fails from the midpoints bound; now, since we have shown at least one valid \\( t \\) exists, it must be the claimed value.\n\nThe answer is: \\(\\boxed{30(1 + \\sqrt{5})}\\).",
        "answer": "30(1 + \\sqrt{5})",
        "source": "usa_team_selection_test",
        "refined_statement": "Sure, let's process the given problem statement according to the outlined steps:\n\n---\n\n**Step 1: Determine the Problem Type**\n\n- The problem involves finding a specific solution, specifically a real number \\( t \\), given certain conditions. \n- It is a Solving Problem with an explicit answer provided.\n- This makes it a Verification Proposition, as it involves verifying that the given value \\( t = 30(1 + \\sqrt{5}) \\) satisfies the problem's conditions.\n\n---\n\n**Step 2: Identify Mathematical Elements**\n\n- **Mathematical Objects:**\n  - Set of points: \\( \\{P_1, P_2, \\ldots, P_{120}\\} \\) on the boundary of a unit square.\n  - Function to calculate total distance: \\( g(Q) = \\sum_{i=1}^{120} |QP_i| \\) for a point \\( Q \\) on the boundary.\n\n- **Properties and Relationships:**\n  - The function \\( g(Q) \\) sums the distances from a point \\( Q \\) to each of the 120 points \\( P_i \\).\n  - The boundary of the unit square is a continuous path.\n\n- **Constraint Conditions:**\n  - The points \\( P_1, \\ldots, P_{120} \\) are fixed on the boundary.\n  - The point \\( Q \\) is also on the boundary of the unit square.\n  - The value \\( t \\) must satisfy \\( g(Q) = t \\) for some \\( Q \\).\n\n---\n\n**Step 3: Construct the Mathematical Proposition**\n\nThe mathematical proposition, formatted in LaTeX, is as follows:\n\n```latex\n\\[\n\\text{For any set of 120 points } \\{P_1, P_2, \\ldots, P_{120}\\} \\text{ on the boundary of a unit square, there exists a point } Q \\text{ on this boundary such that }\n\\sum_{i=1}^{120} |QP_i| = 30(1 + \\sqrt{5}).\n\\]\n```\n\nThis proposition asserts that the specified value \\( t = 30(1 + \\sqrt{5}) \\) satisfies the condition for any configuration of the 120 points on the boundary of the unit square.",
        "latex_code": "\\[\n\\text{For any set of 120 points } \\{P_1, P_2, \\ldots, P_{120}\\} \\text{ on the boundary of a unit square, there exists a point } Q \\text{ on this boundary such that }\n\\sum_{i=1}^{120} |QP_i| = 30(1 + \\sqrt{5}).\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Perimeter of the Unit Square\n\u251c\u2500\u2500 Auxiliary Condition1.2. Properties of Distances on the Boundary\n\u251c\u2500\u2500 Auxiliary Condition1.3. Average Distances on Closed Curve Lemma\n\u2514\u2500\u2500 Case1. Case 1: Consider Q on a side of the square\n    \u251c\u2500\u2500 Sub-Case1.1. Sub-Case 1.1: Q on the bottom side\n    \u251c\u2500\u2500 Sub-Case1.2. Sub-Case 1.2: Q on the left side\n    \u251c\u2500\u2500 Sub-Case1.3. Sub-Case 1.3: Q on the top side\n    \u2514\u2500\u2500 Sub-Case1.4. Sub-Case 1.4: Q on the right side\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition: Existence of point Q such that sum of distances equals 30(1 + sqrt(5)).",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Perimeter of the Unit Square: Understanding parameterization.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Properties of Distances on the Boundary.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "Average Distances on a Closed Curve Lemma.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Consider Q on a side of the square.",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "SubCase1.1",
                "type": "Sub-Case",
                "content": "Q on the bottom side.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "SubCase1.2",
                "type": "Sub-Case",
                "content": "Q on the left side.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "SubCase1.3",
                "type": "Sub-Case",
                "content": "Q on the top side.",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "SubCase1.4",
                "type": "Sub-Case",
                "content": "Q on the right side.",
                "dependencies": [
                    "Case1"
                ]
            }
        ],
        "block_tree": "To decompose the given proposition into a structured tree-like Block Structure, follow these steps:\n\n### 1. List the Problem Conditions:\n\n#### Definitions:\n- **Points on Unit Square:** A set of 120 points \\( \\{P_1, P_2, \\ldots, P_{120}\\} \\) located on the boundary of a unit square.\n- **Unit Square:** A square with side length 1.\n- **Distance Function:** \\( |QP_i| \\) denotes the Euclidean distance between points \\( Q \\) and \\( P_i \\).\n\n#### Goal:\n- **Objective:** Demonstrate the existence of a point \\( Q \\) on the boundary of the unit square such that the sum of distances from \\( Q \\) to each \\( P_i \\) equals \\( 30(1 + \\sqrt{5}) \\).\n\n### 2. Introduce Auxiliary Elements:\n\n#### Auxiliary Conditions:\n- **Auxiliary Condition 1.1:** Understanding the perimeter of the unit square and its parameterization.\n- **Auxiliary Condition 1.2:** Utilize properties of distances on the square's boundary.\n- **Auxiliary Condition 1.3:** Lemma regarding average distances on a closed curve.\n\n### 3. Decompose the Proof into Blocks:\n\n#### Propositions:\n- **Proposition 1:** Main Proposition: Existence of the point \\( Q \\) on the boundary satisfying the condition.\n\n#### Case Analysis:\n- **Case 1:** Consider \\( Q \\) on a side of the square.\n  - **Sub-Case 1.1:** \\( Q \\) on the bottom side.\n  - **Sub-Case 1.2:** \\( Q \\) on the left side.\n  - **Sub-Case 1.3:** \\( Q \\) on the top side.\n  - **Sub-Case 1.4:** \\( Q \\) on the right side.\n\n### 4. Generate the Proof Tree Structure:\n\n#### Text-Based Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Perimeter of the Unit Square\n\u251c\u2500\u2500 Auxiliary Condition1.2. Properties of Distances on the Boundary\n\u251c\u2500\u2500 Auxiliary Condition1.3. Average Distances on Closed Curve Lemma\n\u2514\u2500\u2500 Case1. Case 1: Consider Q on a side of the square\n    \u251c\u2500\u2500 Sub-Case1.1. Sub-Case 1.1: Q on the bottom side\n    \u251c\u2500\u2500 Sub-Case1.2. Sub-Case 1.2: Q on the left side\n    \u251c\u2500\u2500 Sub-Case1.3. Sub-Case 1.3: Q on the top side\n    \u2514\u2500\u2500 Sub-Case1.4. Sub-Case 1.4: Q on the right side\n```\n\n### 5. Organize Each Node's Tasks into JSON Fields:\n\n#### JSON Objects:\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition: Existence of point Q such that sum of distances equals 30(1 + sqrt(5)).\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Perimeter of the Unit Square: Understanding parameterization.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Properties of Distances on the Boundary.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Average Distances on a Closed Curve Lemma.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Consider Q on a side of the square.\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"SubCase1.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Q on the bottom side.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"SubCase1.2\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Q on the left side.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"SubCase1.3\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Q on the top side.\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"SubCase1.4\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Q on the right side.\",\n    \"dependencies\": [\"Case1\"]\n  }\n]\n```\n\n### 6. Format the Combined Output:\n\nEnsure that the JSON objects and the text-based tree structure above accurately represent the hierarchical structure and logical dependencies of the proof decomposition."
    },
    {
        "domain": [
            "Mathematics -> Geometry -> Plane Geometry -> Triangles -> Other",
            "Mathematics -> Geometry -> Plane Geometry -> Angles"
        ],
        "difficulty": 6.5,
        "problem": "Let $ ABP, BCQ, CAR$ be three non-overlapping triangles erected outside of acute triangle $ ABC$. Let $ M$ be the midpoint of segment $ AP$. Given that $ \\angle PAB \\equal{} \\angle CQB \\equal{} 45^\\circ$, $ \\angle ABP \\equal{} \\angle QBC \\equal{} 75^\\circ$, $ \\angle RAC \\equal{} 105^\\circ$, and $ RQ^2 \\equal{} 6CM^2$, compute $ AC^2/AR^2$.\r\n\r\n[i]Zuming Feng.[/i]",
        "solution": "\nLet \\( ABP, BCQ, CAR \\) be three non-overlapping triangles erected outside of acute triangle \\( ABC \\). Let \\( M \\) be the midpoint of segment \\( AP \\). Given that \\( \\angle PAB = \\angle CQB = 45^\\circ \\), \\( \\angle ABP = \\angle QBC = 75^\\circ \\), \\( \\angle RAC = 105^\\circ \\), and \\( RQ^2 = 6CM^2 \\), we aim to compute \\( \\frac{AC^2}{AR^2} \\).\n\nConstruct parallelogram \\( CADP \\).\n\n**Claim:** \\( \\triangle AQR \\sim \\triangle ADC \\).\n\n**Proof:** Observe that \\( \\triangle BPA \\sim \\triangle BCQ \\), hence \\( \\triangle BAQ \\sim \\triangle BPC \\). Consequently,\n\\[\n\\frac{AQ}{AD} = \\frac{AQ}{CP} = \\frac{BP}{BA} = \\sqrt{\\frac{3}{2}} = \\frac{QR}{DC}.\n\\]\nSince \\( \\angle RAC = 105^\\circ \\) and \\( \\angle QAD = \\angle CPA + \\angle QAP = 180^\\circ - \\angle (CP, AQ) = 180^\\circ - \\angle ABP = 105^\\circ \\), we can use SSA similarity (since \\( 105^\\circ > 90^\\circ \\)) to conclude that \\( \\triangle AQR \\sim \\triangle ADC \\).\n\nThus, it follows that\n\\[\n\\frac{AC^2}{AR^2} = \\frac{2}{3}.\n\\]\n\nThe answer is: \\(\\boxed{\\frac{2}{3}}\\).",
        "answer": "\\frac{2}{3}",
        "source": "usa_team_selection_test",
        "refined_statement": "\n---\nStep 1: Determine the Problem Type\n- The problem requires computing a specific ratio, and an answer is already provided.\n- It is a Computing Problem with a proof goal, making it a Verification Proposition, asserting that a particular mathematical conclusion holds true.\n\n---\nStep 2: Identify Mathematical Elements\n- Mathematical Objects:\n  - Triangles: \\( \\triangle ABP \\), \\( \\triangle BCQ \\), \\( \\triangle CAR \\), \\( \\triangle AQR \\), \\( \\triangle ADC \\).\n  - Points: \\( A, B, C, P, Q, R, M, D \\).\n  - Parallelogram: \\( CADP \\).\n- Properties and Relationships:\n  - Angles: \\( \\angle PAB = \\angle CQB = 45^\\circ \\), \\( \\angle ABP = \\angle QBC = 75^\\circ \\), \\( \\angle RAC = 105^\\circ \\).\n  - Midpoint: \\( M \\) is the midpoint of \\( AP \\).\n  - Lengths: \\( RQ^2 = 6CM^2 \\).\n  - Similarity: \\( \\triangle AQR \\sim \\triangle ADC \\).\n- Constraint Conditions:\n  - The triangles are non-overlapping and erected outside of \\( \\triangle ABC \\).\n  - Parallelogram \\( CADP \\) is constructed.\n\n---\nStep 3: Construct the Mathematical Proposition\n```latex\n\\[\n\\text{Given an acute triangle } ABC \\text{ with non-overlapping triangles } ABP, BCQ, \\text{ and } CAR \\text{ erected outside, let } M \\text{ be the midpoint of } AP. \n\\text{ Given } \\angle PAB = \\angle CQB = 45^\\circ, \\angle ABP = \\angle QBC = 75^\\circ, \\angle RAC = 105^\\circ, \\text{ and } RQ^2 = 6CM^2, \n\\text{ it follows that } \\frac{AC^2}{AR^2} = \\frac{2}{3}.\n\\]\n```\nThis proposition verifies the stated conclusion that the ratio \\( \\frac{AC^2}{AR^2} \\) equals \\( \\frac{2}{3} \\) given the problem's conditions and relationships.",
        "latex_code": "\\[\n\\text{Given an acute triangle } ABC \\text{ with non-overlapping triangles } ABP, BCQ, \\text{ and } CAR \\text{ erected outside, let } M \\text{ be the midpoint of } AP. \n\\text{ Given } \\angle PAB = \\angle CQB = 45^\\circ, \\angle ABP = \\angle QBC = 75^\\circ, \\angle RAC = 105^\\circ, \\text{ and } RQ^2 = 6CM^2, \n\\text{ it follows that } \\frac{AC^2}{AR^2} = \\frac{2}{3}.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Known Angles and Identities\n\u251c\u2500\u2500 Auxiliary Condition1.2. Relationship RQ^2 = 6CM^2\n\u251c\u2500\u2500 Case1. Angles 45\u00b0\n\u2502   \u2514\u2500\u2500 Sub-Case1.1. Properties of Triangles ABP and BCQ\n\u251c\u2500\u2500 Case2. Angles 75\u00b0\n\u2502   \u2514\u2500\u2500 Sub-Case2.1. Properties of Triangle CAR\n\u2502       \u2514\u2500\u2500 Sub-Sub-Case2.1.1. Impact of RQ^2 = 6CM^2\n\u2514\u2500\u2500 Case3. Trigonometric Relationship between AC^2 and AR^2\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Known Angles and Identities",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Relationship RQ^2 = 6CM^2",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "Angles 45\u00b0",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1"
                ]
            },
            {
                "id": "SubCase1.1",
                "type": "Sub-Case",
                "content": "Properties of Triangles ABP and BCQ",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "Angles 75\u00b0",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1"
                ]
            },
            {
                "id": "SubCase2.1",
                "type": "Sub-Case",
                "content": "Properties of Triangle CAR",
                "dependencies": [
                    "Case2",
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "SubSubCase2.1.1",
                "type": "Sub-Sub-Case",
                "content": "Impact of RQ^2 = 6CM^2",
                "dependencies": [
                    "SubCase2.1"
                ]
            },
            {
                "id": "Case3",
                "type": "Case",
                "content": "Trigonometric Relationship between AC^2 and AR^2",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1"
                ]
            }
        ],
        "block_tree": "To break down the given proposition into a tree-like Block Structure suitable for Lean4 automated proofs, we'll first outline the problem conditions, introduce auxiliary elements, then decompose the proof into blocks, and finally generate both a text-based tree structure and corresponding JSON objects.\n\n### 1. Problem Conditions\n\n#### Definitions:\n- **Triangle \\( ABC \\):** An acute triangle.\n- **Triangles \\( ABP, BCQ, \\) and \\( CAR \\):** Non-overlapping triangles erected outside triangle \\( ABC \\).\n- **Midpoint \\( M \\):** Point \\( M \\) is the midpoint of segment \\( AP \\).\n- **Angles:**\n  - \\( \\angle PAB = 45^\\circ \\)\n  - \\( \\angle CQB = 45^\\circ \\)\n  - \\( \\angle ABP = 75^\\circ \\)\n  - \\( \\angle QBC = 75^\\circ \\)\n  - \\( \\angle RAC = 105^\\circ \\)\n\n#### Goal:\nProve that:\n\\[ \\frac{AC^2}{AR^2} = \\frac{2}{3} \\]\n\n### 2. Introduce Auxiliary Elements\n\n#### Auxiliary Conditions:\n- **Auxiliary Condition 1.1:** Known geometric identities and trigonometric properties for angles given in the problem.\n- **Auxiliary Condition 1.2:** Relationship \\( RQ^2 = 6CM^2 \\).\n\n### 3. Decompose the Proof into Blocks\n\n#### Propositions:\n- **Proposition 1:** Use auxiliary conditions to relate the sides and angles in the triangles.\n  - **Case 1:** Analyze the relationship between \\( \\angle PAB = \\angle CQB = 45^\\circ \\) and their implications on triangle properties.\n    - **Sub-Case 1.1:** Consider the properties of triangle \\( ABP \\) and \\( BCQ \\).\n  - **Case 2:** Consider \\( \\angle ABP = \\angle QBC = 75^\\circ \\) and analyze implications.\n    - **Sub-Case 2.1:** Consider the properties of triangle \\( CAR \\).\n      - **Sub-Sub-Case 2.1.1:** Explore the impact of \\( RQ^2 = 6CM^2 \\).\n  - **Case 3:** Use trigonometric identities to establish a relationship between \\( AC^2 \\) and \\( AR^2 \\).\n\n### 4. Generate the Proof Tree Structure\n\n#### Text-Based Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Known Angles and Identities\n\u251c\u2500\u2500 Auxiliary Condition1.2. Relationship RQ^2 = 6CM^2\n\u251c\u2500\u2500 Case1. Angles 45\u00b0\n\u2502   \u2514\u2500\u2500 Sub-Case1.1. Properties of Triangles ABP and BCQ\n\u251c\u2500\u2500 Case2. Angles 75\u00b0\n\u2502   \u2514\u2500\u2500 Sub-Case2.1. Properties of Triangle CAR\n\u2502       \u2514\u2500\u2500 Sub-Sub-Case2.1.1. Impact of RQ^2 = 6CM^2\n\u2514\u2500\u2500 Case3. Trigonometric Relationship between AC^2 and AR^2\n```\n\n### 5. Organize Each Node's Tasks into JSON Fields\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Known Angles and Identities\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Relationship RQ^2 = 6CM^2\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"Angles 45\u00b0\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\"]\n  },\n  {\n    \"id\": \"SubCase1.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Properties of Triangles ABP and BCQ\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"Angles 75\u00b0\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\"]\n  },\n  {\n    \"id\": \"SubCase2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Properties of Triangle CAR\",\n    \"dependencies\": [\"Case2\", \"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"SubSubCase2.1.1\",\n    \"type\": \"Sub-Sub-Case\",\n    \"content\": \"Impact of RQ^2 = 6CM^2\",\n    \"dependencies\": [\"SubCase2.1\"]\n  },\n  {\n    \"id\": \"Case3\",\n    \"type\": \"Case\",\n    \"content\": \"Trigonometric Relationship between AC^2 and AR^2\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\"]\n  }\n]\n```\n\nThis structure provides a clear breakdown of the complex proposition into a series of interrelated components, facilitating the Lean4 automated proof process."
    },
    {
        "domain": [
            "Mathematics -> Discrete Mathematics -> Graph Theory"
        ],
        "difficulty": 7.0,
        "problem": "At a university dinner, there are 2017 mathematicians who each order two distinct entr\u00e9es, with no two mathematicians ordering the same pair of entr\u00e9es. The cost of each entr\u00e9e is equal to the number of mathematicians who ordered it, and the university pays for each mathematician's less expensive entr\u00e9e (ties broken arbitrarily). Over all possible sets of orders, what is the maximum total amount the university could have paid?",
        "solution": "\nTo determine the maximum total amount the university could have paid, we can model the problem using graph theory. Consider a graph \\( G \\) with 2017 edges, where each edge represents a pair of distinct entr\u00e9es ordered by a mathematician. The cost of each entr\u00e9e is equal to the number of mathematicians who ordered it, and the university pays for each mathematician's less expensive entr\u00e9e.\n\nWe seek to maximize the sum \n\\[ S(G) = \\sum_{e = vw} \\min(\\deg(v), \\deg(w)), \\]\nwhere \\( \\deg(v) \\) denotes the degree of vertex \\( v \\).\n\nThe optimal configuration is achieved by the graph \\( L_{64} \\), which consists of a clique on 64 vertices plus an additional vertex connected to one vertex of the clique. This graph has \\( 64 \\) vertices and \\( \\binom{64}{2} + 1 = 2017 \\) edges. The sum \\( S(L_{64}) \\) is given by:\n\\[ S(L_{64}) = (k-1) \\binom{k}{2} + 1 = 63 \\cdot \\binom{64}{2} + 1. \\]\n\nCalculating this, we find:\n\\[ S(L_{64}) = 63 \\cdot \\frac{64 \\cdot 63}{2} + 1 = 63 \\cdot 2016 + 1 = 127008 + 1 = 127009. \\]\n\nThus, the maximum total amount the university could have paid is:\n\\[ \\boxed{127009}. \\]",
        "answer": "127009",
        "source": "usa_team_selection_test",
        "refined_statement": "---\n### Step 1: Determine the Problem Type\n- The problem does not have an explicit proof goal; it is a computing problem.\n- The task involves deriving a numerical result based on given data or a formula.\n- Since the answer is provided, it is a Verification Proposition, asserting that the calculated result is correct.\n\n---\n### Step 2: Identify Mathematical Elements\n- **Mathematical Objects:**\n  - Set of mathematicians: \\( M = \\{ m_1, m_2, \\dots, m_{2017} \\} \\).\n  - Set of entr\u00e9es: \\( E = \\{ e_1, e_2, \\dots, e_n \\} \\).\n  - Graph \\( G \\) where each edge \\( e = vw \\) represents a pair of distinct entr\u00e9es ordered by a mathematician.\n  - Degree of a vertex \\( \\deg(v) \\), representing the number of mathematicians who ordered entr\u00e9e \\( v \\).\n\n- **Properties and Relationships:**\n  - Each mathematician orders exactly two distinct entr\u00e9es, and no two mathematicians order the same pair.\n  - The cost of each entr\u00e9e \\( e \\) is equal to the number of mathematicians who ordered it, i.e., \\( \\deg(e) \\).\n\n- **Constraint Conditions:**\n  - The university pays for each mathematician's less expensive entr\u00e9e.\n  - The goal is to maximize the sum \\( S(G) = \\sum_{e = vw} \\min(\\deg(v), \\deg(w)) \\).\n\n---\n### Step 3: Construct the Mathematical Proposition\nUsing the identified elements, the mathematical proposition can be constructed as follows:\n\n```latex\n\\[\n\\begin{array}{l}\n\\text{Verify that the maximum total amount the university could have paid is given by} \\\\\nS(L_{64}) = \\sum_{e = vw} \\min(\\deg(v), \\deg(w)), \\text{ where } L_{64} \\text{ is a graph} \\\\\n\\text{with 64 vertices consisting of a clique on 64 vertices plus an additional vertex} \\\\\n\\text{connected to one vertex of the clique, such that} \\\\\nS(L_{64}) = (k-1) \\binom{k}{2} + 1 = 63 \\cdot \\binom{64}{2} + 1 = 127009.\n\\end{array}\n\\]\n```\n\nThis proposition asserts that the calculated maximum total amount is indeed \\( 127009 \\), verifying the provided answer.",
        "latex_code": "\\[\n\\begin{array}{l}\n\\text{Verify that the maximum total amount the university could have paid is given by} \\\\\nS(L_{64}) = \\sum_{e = vw} \\min(\\deg(v), \\deg(w)), \\text{ where } L_{64} \\text{ is a graph} \\\\\n\\text{with 64 vertices consisting of a clique on 64 vertices plus an additional vertex} \\\\\n\\text{connected to one vertex of the clique, such that} \\\\\nS(L_{64}) = (k-1) \\binom{k}{2} + 1 = 63 \\cdot \\binom{64}{2} + 1 = 127009.\n\\end{array}\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of degree for vertices in a clique\n\u251c\u2500\u2500 Auxiliary Condition1.2. Expression for sum of minimum degrees for graph L_{64}\n\u251c\u2500\u2500 Auxiliary Condition1.3. Known combinatorial formulas\n\u251c\u2500\u2500 Proposition1.1. Calculate degree of each vertex in the clique\n\u251c\u2500\u2500 Proposition1.2. Calculate sum of minimum degrees for edges within the clique\n\u251c\u2500\u2500 Proposition1.3. Calculate contribution from the additional vertex\n\u2514\u2500\u2500 Proposition1.4. Verify total S(L_{64}) = 127009\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of degree for vertices in a clique",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Expression for sum of minimum degrees for graph L_{64}",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "Known combinatorial formulas",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Calculate degree of each vertex in the clique",
                "dependencies": [
                    "AuxiliaryCondition1.1"
                ]
            },
            {
                "id": "Proposition1.2",
                "type": "Proposition",
                "content": "Calculate sum of minimum degrees for edges within the clique",
                "dependencies": [
                    "AuxiliaryCondition1.2",
                    "Proposition1.1"
                ]
            },
            {
                "id": "Proposition1.3",
                "type": "Proposition",
                "content": "Calculate contribution from the additional vertex",
                "dependencies": [
                    "AuxiliaryCondition1.2"
                ]
            },
            {
                "id": "Proposition1.4",
                "type": "Proposition",
                "content": "Verify total S(L_{64}) = 127009",
                "dependencies": [
                    "Proposition1.2",
                    "Proposition1.3",
                    "AuxiliaryCondition1.3"
                ]
            }
        ],
        "block_tree": "To decompose the given mathematical proposition into a structured proof tree, we will follow the specified task instructions. The proposition involves verifying a calculation related to a specific graph \\( L_{64} \\). \n\n### 1. Problem Conditions\n\n#### Definitions:\n- **Graph \\( L_{64} \\)**: A graph with 64 vertices consisting of a clique on 64 vertices plus an additional vertex connected to one vertex of the clique.\n- **Clique**: A subset of vertices such that every two distinct vertices are adjacent.\n- **Degree \\(\\deg(v)\\)**: The number of edges incident to a vertex \\( v \\).\n- **Mathematical Expression**: \\( S(L_{64}) = \\sum_{e = vw} \\min(\\deg(v), \\deg(w)) \\).\n\n#### Goal:\n- Verify that the maximum total amount the university could have paid is \\( S(L_{64}) = 127009 \\).\n\n### 2. Introduce Auxiliary Elements\n\n#### Auxiliary Conditions:\n- **Auxiliary Condition 1.1**: Definition of degree for vertices in a clique.\n- **Auxiliary Condition 1.2**: Expression for the sum of minimum degrees for the graph \\( L_{64} \\).\n- **Auxiliary Condition 1.3**: Known combinatorial formulas:\n  - \\( \\binom{n}{2} \\): The number of ways to choose 2 elements from a set of \\( n \\) elements.\n  - \\( \\sum_{e = vw} \\min(\\deg(v), \\deg(w)) \\) is calculated over all edges \\( e \\).\n\n### 3. Decompose the Proof into Blocks\n\n#### Propositions:\n- **Proposition 1**: Main Proposition\n  - **Proposition 1.1**: Calculate the degree of each vertex in the clique.\n  - **Proposition 1.2**: Calculate the sum of minimum degrees for edges within the clique.\n  - **Proposition 1.3**: Calculate the contribution from the additional vertex.\n  - **Proposition 1.4**: Verify the total \\( S(L_{64}) = 127009 \\).\n\n### 4. Generate the Proof Tree Structure\n\n#### Text-Based Tree Structure:\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of degree for vertices in a clique\n\u251c\u2500\u2500 Auxiliary Condition1.2. Expression for sum of minimum degrees for graph L_{64}\n\u251c\u2500\u2500 Auxiliary Condition1.3. Known combinatorial formulas\n\u251c\u2500\u2500 Proposition1.1. Calculate degree of each vertex in the clique\n\u251c\u2500\u2500 Proposition1.2. Calculate sum of minimum degrees for edges within the clique\n\u251c\u2500\u2500 Proposition1.3. Calculate contribution from the additional vertex\n\u2514\u2500\u2500 Proposition1.4. Verify total S(L_{64}) = 127009\n```\n\n### 5. Organize Each Node's Tasks into JSON Fields\n\n#### JSON Objects:\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of degree for vertices in a clique\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Expression for sum of minimum degrees for graph L_{64}\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Known combinatorial formulas\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Calculate degree of each vertex in the clique\",\n    \"dependencies\": [\"AuxiliaryCondition1.1\"]\n  },\n  {\n    \"id\": \"Proposition1.2\",\n    \"type\": \"Proposition\",\n    \"content\": \"Calculate sum of minimum degrees for edges within the clique\",\n    \"dependencies\": [\"AuxiliaryCondition1.2\", \"Proposition1.1\"]\n  },\n  {\n    \"id\": \"Proposition1.3\",\n    \"type\": \"Proposition\",\n    \"content\": \"Calculate contribution from the additional vertex\",\n    \"dependencies\": [\"AuxiliaryCondition1.2\"]\n  },\n  {\n    \"id\": \"Proposition1.4\",\n    \"type\": \"Proposition\",\n    \"content\": \"Verify total S(L_{64}) = 127009\",\n    \"dependencies\": [\"Proposition1.2\", \"Proposition1.3\", \"AuxiliaryCondition1.3\"]\n  }\n]\n```\n\nThis structured breakdown and corresponding JSON objects provide a clear map of the logical flow and dependencies within the proof, aiding in automated proof verification."
    },
    {
        "domain": [
            "Mathematics -> Discrete Mathematics -> Combinatorics"
        ],
        "difficulty": 7.0,
        "problem": "Let $f:X\\rightarrow X$, where $X=\\{1,2,\\ldots ,100\\}$, be a function satisfying:\n1) $f(x)\\neq x$ for all $x=1,2,\\ldots,100$;\n2) for any subset $A$ of $X$ such that $|A|=40$, we have $A\\cap f(A)\\neq\\emptyset$.\nFind the minimum $k$ such that for any such function $f$, there exist a subset $B$ of $X$, where $|B|=k$, such that $B\\cup f(B)=X$.",
        "solution": "\nLet \\( f: X \\rightarrow X \\), where \\( X = \\{1, 2, \\ldots, 100\\} \\), be a function satisfying:\n1. \\( f(x) \\neq x \\) for all \\( x = 1, 2, \\ldots, 100 \\);\n2. For any subset \\( A \\) of \\( X \\) such that \\( |A| = 40 \\), we have \\( A \\cap f(A) \\neq \\emptyset \\).\n\nWe need to find the minimum \\( k \\) such that for any such function \\( f \\), there exists a subset \\( B \\) of \\( X \\), where \\( |B| = k \\), such that \\( B \\cup f(B) = X \\).\n\nConsider the arrow graph of \\( f \\) on \\( X \\). Each connected component looks like a directed cycle with a bunch of trees coming off each vertex of the cycle. For each connected component \\( C \\), let \\( \\alpha(C) \\) be the maximum number of elements of \\( C \\) we can choose such that their image under \\( f \\) is disjoint from them, and let \\( \\beta(C) \\) be the minimum number of vertices of \\( C \\) we can choose such that they and their image cover \\( C \\). We have the following key claim:\n\n**Claim:** We have \\( \\alpha(C) \\geq \\beta(C) - 1 \\).\n\n**Proof:** It suffices to show that given a subset \\( D \\subseteq C \\) such that \\( D \\) and \\( f(D) \\) cover \\( C \\), we can find a subset \\( D' \\subseteq C \\) such that \\( |D'| \\leq |D| \\) and such that there is at most one pair of elements from \\( D' \\) that are adjacent.\n\nLabel the edges of \\( C \\) with ordinal numbers. Label the edges of the cycle with \\( 1 \\), and for any edge with depth \\( k \\) into the tree it's in (with depth \\( 1 \\) for edges incident to the cycle), label it with \\( \\omega^k \\). Suppose we're given \\( D \\subseteq C \\) such that \\( D \\) and \\( f(D) \\) cover \\( C \\). Call an edge *bad* if both of its endpoints are in \\( D \\). We'll show that either all the bad edges are on the central cycle, or there is a way to modify \\( D \\) such that its cardinality does not increase, and the sum of the weights of the bad edges decreases. Since we can't have infinite decreasing sequences of ordinals, we'll reduce the problem to the case where the only bad edges are on the central cycle.\n\nSuppose we have a bad edge \\( a \\to f(a) \\) with weight \\( \\omega^k \\) for \\( k \\geq 2 \\). Modify \\( D \\) by removing \\( f(a) \\) from \\( D \\) and adding \\( f(f(a)) \\) if it is not already present. If \\( f(f(a)) \\) is already present, then the size of \\( D \\) decreases and the set of bad edges becomes a strict subset of what it was before, so the sum of their weights goes down. If \\( f(f(a)) \\) is not already present, then the size of \\( D \\) doesn't change, and we lose at least one bad edge with weight \\( \\omega^k \\), and potentially gain many bad edges with weights \\( \\omega^{k-1} \\) or \\( \\omega^{k-2} \\), so the total weight sum goes down.\n\nSuppose we have a bad edge \\( a \\to f(a) \\) with weight \\( \\omega \\). Then, \\( f(a) \\) is part of the central cycle of \\( C \\). If \\( f(f(a)) \\) is already present, delete \\( f(a) \\), so the size of \\( D \\) doesn't change, and the set of bad edges becomes a strict subset of what it was before, so the sum of their weights goes down. Now suppose \\( f(f(a)) \\) is not already present. If there are elements that map to \\( f(f(a)) \\) in the tree rooted at \\( f(f(a)) \\) that are in \\( D \\), then we can simply delete \\( f(a) \\), and by the same logic as before, we're fine. So now suppose that there are no elements in the tree rooted at \\( f(f(a)) \\) that map to it. Then, deleting \\( f(a) \\) and adding \\( f(f(a)) \\) removes an edge of weight \\( \\omega \\) and only adds edges of weight \\( 1 \\), so the size of \\( D \\) stays the same and the sum of the weights goes down.\n\nThis shows that we can reduce \\( D \\) down such that the only bad edges of \\( D \\) are on the central cycle. Call a vertex of the central cycle *deficient* if it does not have any elements of \\( D \\) one level above it in the tree rooted at the vertex, or in other words, a vertex is deficient if it will not be covered by \\( D \\cup f(D) \\) if we remove all the cycle elements from \\( D \\). Note that all elements of \\( D \\) on the cycle are deficient since there are no bad edges not on the cycle. Fixing \\( D \\) and changing which subset of deficient vertices we choose, the claim reduces to the following: Suppose we have a directed cycle of length \\( m \\), and some \\( k \\) of the vertices are said to be deficient. There is a subset \\( D \\) of the deficient vertices such that all the deficient vertices are covered by either \\( D \\) or the image of \\( D \\) of minimal size such that at most one edge of the cycle has both endpoints in \\( D \\).\n\nTo prove this, split the deficient vertices into contiguous blocks. First suppose that the entire cycle is not a block. Each block acts independently, and is isomorphic to a directed path. It is clear that in this case, it is optimal to pick every other vertex from each block, and any other selection covering every vertex of the block with it and its image will be of larger size. Thus, it suffices to look at the case where all vertices are deficient. In this case, it is again clearly optimal to select \\( (m+1)/2 \\) of the vertices such that there is only one bad edge, so we're done.\n\nThis completes the proof of the claim. \\( \\blacksquare \\)\n\nLet \\( \\mathcal{C} \\) be the set of connected components. We see that \n\\[\n39 \\geq \\sum_{C \\in \\mathcal{C}} \\alpha(C) \\geq \\sum_{C \\in \\mathcal{C}} \\beta(C) - |\\mathcal{C}|.\n\\]\nIf \\( |\\mathcal{C}| \\leq 30 \\), then we see that \n\\[\n\\sum_{C \\in \\mathcal{C}} \\beta(C) \\leq 69,\n\\]\nso we can select a subset \\( B \\subseteq X \\) such that \\( |B| \\leq 69 \\) and \\( B \\cup f(B) = X \\). If \\( |\\mathcal{C}| \\geq 31 \\), then from each connected component, select all but some vertex with nonzero indegree (this exists since there are no isolated vertices) to make up \\( B \\). We see then that \\( |B| \\leq 100 - |\\mathcal{C}| = 69 \\) again. Thus, in all cases, we can select valid \\( B \\) with \\( |B| \\leq 69 \\).\n\nIt suffices to construct \\( f \\) such that the minimal such \\( B \\) has size 69. To do this, let the arrow graph of \\( f \\) be made up of 29 disjoint 3-cycles, and a component consisting of a 3-cycle \\( a \\to b \\to c \\to a \\) with another vertex \\( x \\to a \\), and 9 vertices \\( y_1, \\ldots, y_9 \\) pointing to \\( x \\). This satisfies the second condition of the problem, since any \\( A \\) satisfying \\( A \\cap f(A) = \\emptyset \\) can take at most 1 from each 3-cycle, and at most 12 from the last component. Any \\( B \\) satisfying \\( B \\cup f(B) = X \\) must have at least 2 from each of the 3-cycles, and at least 11 from the last component, for a total of at least \\( 29 \\cdot 2 + 11 = 69 \\), as desired. We can get 69 by selecting exactly 2 from each 3-cycle, and everything but \\( x \\) and \\( c \\) from the last component. This shows that the answer to the problem is \\( \\boxed{69} \\).",
        "answer": "69",
        "source": "china_national_olympiad",
        "refined_statement": "Certainly. Let's refine the given mathematical problem into a standard LaTeX-formatted mathematical proposition following the specified steps.\n\n---\nStep 1: Determine the Problem Type\n- The problem has an explicit proof goal.\n- It is a Verification Proposition, as it involves proving that a certain conclusion (finding the minimum \\( k \\)) holds true for any function \\( f \\) satisfying the given conditions.\n\n---\nStep 2: Identify Mathematical Elements\n- Mathematical Objects:\n  - Set \\( X = \\{ 1, 2, \\ldots, 100 \\} \\).\n  - Function \\( f: X \\to X \\).\n  - Subsets \\( A, B \\subseteq X \\).\n  - Integer \\( k \\) (the size of subset \\( B \\)).\n\n- Properties and Relationships:\n  - \\( f(x) \\neq x \\) for all \\( x \\in X \\).\n  - For any subset \\( A \\subseteq X \\) with \\( |A| = 40 \\), \\( A \\cap f(A) \\neq \\emptyset \\).\n  - \\( B \\cup f(B) = X \\).\n\n- Constraint Conditions:\n  - Find the minimum \\( k \\) such that there exists a subset \\( B \\subseteq X \\) with \\( |B| = k \\) satisfying \\( B \\cup f(B) = X \\).\n\n---\nStep 3: Construct the Mathematical Proposition\n```latex\n\\[\n\\text{Let } f: X \\to X \\text{ be a function where } X = \\{ 1, 2, \\ldots, 100 \\} \\text{ such that:}\n\\]\n\\[\n1. \\quad f(x) \\neq x \\text{ for all } x \\in X;\n\\]\n\\[\n2. \\quad \\text{For any subset } A \\subseteq X \\text{ with } |A| = 40, \\text{ we have } A \\cap f(A) \\neq \\emptyset.\n\\]\n\\[\n\\text{Find the minimum integer } k \\text{ such that for any function } f \\text{ satisfying these conditions,}\n\\]\n\\[\n\\text{there exists a subset } B \\subseteq X \\text{ with } |B| = k \\text{ such that } B \\cup f(B) = X.\n\\]\n\\[\n\\text{The answer is } \\boxed{69}.\n\\]\n```\n\nThis LaTeX statement accurately captures the problem as a Verification Proposition, outlining the conditions and the goal to find the minimum \\( k \\).",
        "latex_code": "\\[\n\\text{Let } f: X \\to X \\text{ be a function where } X = \\{ 1, 2, \\ldots, 100 \\} \\text{ such that:}\n\\]\n\\[\n1. \\quad f(x) \\neq x \\text{ for all } x \\in X;\n\\]\n\\[\n2. \\quad \\text{For any subset } A \\subseteq X \\text{ with } |A| = 40, \\text{ we have } A \\cap f(A) \\neq \\emptyset.\n\\]\n\\[\n\\text{Find the minimum integer } k \\text{ such that for any function } f \\text{ satisfying these conditions,}\n\\]\n\\[\n\\text{there exists a subset } B \\subseteq X \\text{ with } |B| = k \\text{ such that } B \\cup f(B) = X.\n\\]\n\\[\n\\text{The answer is } \\boxed{69}.\n\\]",
        "tree_structure": "```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of set X\n\u2502   \u2514\u2500\u2500 X = {1, 2, ..., 100}\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of subset A\n\u2502   \u2514\u2500\u2500 |A| = 40\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of subset B\n\u2502   \u2514\u2500\u2500 B \u222a f(B) = X\n\u251c\u2500\u2500 Proposition1.1. Determine the minimum k\n\u2502   \u251c\u2500\u2500 Case1. k < 69\n\u2502   \u2502   \u2514\u2500\u2500 Proposition1.1.1. Show contradiction for k < 69\n\u2502   \u2514\u2500\u2500 Case2. k = 69\n\u2502       \u2514\u2500\u2500 Sub-Case2.1. Construct subset B\n\u2502           \u2514\u2500\u2500 Proposition2.1.1. Show B \u222a f(B) = X\n```",
        "json_objects": [
            {
                "id": "Proposition1",
                "type": "Proposition",
                "content": "Main Proposition - Determine the minimum k such that B \u222a f(B) = X",
                "dependencies": []
            },
            {
                "id": "AuxiliaryCondition1.1",
                "type": "Auxiliary Condition",
                "content": "Definition of set X: X = {1, 2, ..., 100}",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.2",
                "type": "Auxiliary Condition",
                "content": "Definition of subset A: |A| = 40",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "AuxiliaryCondition1.3",
                "type": "Auxiliary Condition",
                "content": "Definition of subset B: B \u222a f(B) = X",
                "dependencies": [
                    "Proposition1"
                ]
            },
            {
                "id": "Proposition1.1",
                "type": "Proposition",
                "content": "Determine the minimum k",
                "dependencies": [
                    "Proposition1",
                    "AuxiliaryCondition1.1",
                    "AuxiliaryCondition1.2",
                    "AuxiliaryCondition1.3"
                ]
            },
            {
                "id": "Case1",
                "type": "Case",
                "content": "k < 69",
                "dependencies": [
                    "Proposition1.1"
                ]
            },
            {
                "id": "Proposition1.1.1",
                "type": "Proposition",
                "content": "Show contradiction for k < 69",
                "dependencies": [
                    "Case1"
                ]
            },
            {
                "id": "Case2",
                "type": "Case",
                "content": "k = 69",
                "dependencies": [
                    "Proposition1.1"
                ]
            },
            {
                "id": "Sub-Case2.1",
                "type": "Sub-Case",
                "content": "Construct subset B",
                "dependencies": [
                    "Case2"
                ]
            },
            {
                "id": "Proposition2.1.1",
                "type": "Proposition",
                "content": "Show B \u222a f(B) = X",
                "dependencies": [
                    "Sub-Case2.1"
                ]
            }
        ],
        "block_tree": "To aid in breaking down this mathematical proposition into a tree-like block structure suitable for Lean4 automated proofs, we will follow the task instructions closely, starting from listing the problem conditions to finally organizing the nodes into JSON fields.\n\n### Problem Conditions\n\n**Definitions:**\n\n- **Function:** \\( f: X \\to X \\) where \\( X = \\{ 1, 2, \\ldots, 100 \\} \\).\n- **Condition 1:** \\( f(x) \\neq x \\) for all \\( x \\in X \\).\n- **Condition 2:** For any subset \\( A \\subseteq X \\) with \\(|A| = 40\\), we have \\( A \\cap f(A) \\neq \\emptyset \\).\n\n**Goal:**\n\n- Find the minimum integer \\( k \\) such that for any function \\( f \\) satisfying these conditions, there exists a subset \\( B \\subseteq X \\) with \\(|B| = k\\) such that \\( B \\cup f(B) = X \\).\n\n### Introduce Auxiliary Elements\n\n**Auxiliary Conditions:**\n\n- **Auxiliary Condition 1.1:** Definition of the set \\( X = \\{ 1, 2, \\ldots, 100 \\} \\).\n- **Auxiliary Condition 1.2:** Definition of a subset \\( A \\subseteq X \\) with \\(|A| = 40\\).\n- **Auxiliary Condition 1.3:** Definition of the set \\( B \\subseteq X \\) such that \\( B \\cup f(B) = X \\).\n\n### Decompose the Proof into Blocks\n\n**Propositions:**\n\n- **Proposition 1:** Main Proposition - Determine the minimum \\( k \\) such that \\( B \\cup f(B) = X \\).\n\n**Case Analysis:**\n\n- **Case 1:** Assumption that \\( k < 69 \\).\n  - **Proposition 1.1:** Show a contradiction arises if \\( k < 69 \\).\n\n- **Case 2:** Assume \\( k = 69 \\).\n  - **Sub-Case 2.1:** Construct a subset \\( B \\) with \\(|B| = 69\\) such that \\( B \\cup f(B) = X \\).\n\n### Generate the Proof Tree Structure\n\n```\nProposition1. Main Proposition\n\u251c\u2500\u2500 Auxiliary Condition1.1. Definition of set X\n\u2502   \u2514\u2500\u2500 X = {1, 2, ..., 100}\n\u251c\u2500\u2500 Auxiliary Condition1.2. Definition of subset A\n\u2502   \u2514\u2500\u2500 |A| = 40\n\u251c\u2500\u2500 Auxiliary Condition1.3. Definition of subset B\n\u2502   \u2514\u2500\u2500 B \u222a f(B) = X\n\u251c\u2500\u2500 Proposition1.1. Determine the minimum k\n\u2502   \u251c\u2500\u2500 Case1. k < 69\n\u2502   \u2502   \u2514\u2500\u2500 Proposition1.1.1. Show contradiction for k < 69\n\u2502   \u2514\u2500\u2500 Case2. k = 69\n\u2502       \u2514\u2500\u2500 Sub-Case2.1. Construct subset B\n\u2502           \u2514\u2500\u2500 Proposition2.1.1. Show B \u222a f(B) = X\n```\n\n### Organize Each Node's Tasks into JSON Fields\n\n```json\n[\n  {\n    \"id\": \"Proposition1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Main Proposition - Determine the minimum k such that B \u222a f(B) = X\",\n    \"dependencies\": []\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.1\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of set X: X = {1, 2, ..., 100}\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.2\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of subset A: |A| = 40\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"AuxiliaryCondition1.3\",\n    \"type\": \"Auxiliary Condition\",\n    \"content\": \"Definition of subset B: B \u222a f(B) = X\",\n    \"dependencies\": [\"Proposition1\"]\n  },\n  {\n    \"id\": \"Proposition1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Determine the minimum k\",\n    \"dependencies\": [\"Proposition1\", \"AuxiliaryCondition1.1\", \"AuxiliaryCondition1.2\", \"AuxiliaryCondition1.3\"]\n  },\n  {\n    \"id\": \"Case1\",\n    \"type\": \"Case\",\n    \"content\": \"k < 69\",\n    \"dependencies\": [\"Proposition1.1\"]\n  },\n  {\n    \"id\": \"Proposition1.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Show contradiction for k < 69\",\n    \"dependencies\": [\"Case1\"]\n  },\n  {\n    \"id\": \"Case2\",\n    \"type\": \"Case\",\n    \"content\": \"k = 69\",\n    \"dependencies\": [\"Proposition1.1\"]\n  },\n  {\n    \"id\": \"Sub-Case2.1\",\n    \"type\": \"Sub-Case\",\n    \"content\": \"Construct subset B\",\n    \"dependencies\": [\"Case2\"]\n  },\n  {\n    \"id\": \"Proposition2.1.1\",\n    \"type\": \"Proposition\",\n    \"content\": \"Show B \u222a f(B) = X\",\n    \"dependencies\": [\"Sub-Case2.1\"]\n  }\n]\n```\n\nThis structured breakdown and JSON representation should help in creating a coherent proof strategy using Lean4's automated tools."
    }
]