WARNING 02-09 04:14:54 cuda.py:22] You are using a deprecated `pynvml` package. Please install `nvidia-ml-py` instead, and make sure to uninstall `pynvml`. When both of them are installed, `pynvml` will take precedence and cause errors. See https://pypi.org/project/pynvml for more information.
INFO 02-09 04:15:08 llm_engine.py:232] Initializing an LLM engine (v0.6.1) with config: model='/lustre/fast/fast/txiao/zly/ckpt/DeepSeek-Prover-V1.5-RL_numina-math-lean4-sft', speculative_config=None, tokenizer='/lustre/fast/fast/txiao/zly/ckpt/DeepSeek-Prover-V1.5-RL_numina-math-lean4-sft', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir='None/.cache/vllm/', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=/lustre/fast/fast/txiao/zly/ckpt/DeepSeek-Prover-V1.5-RL_numina-math-lean4-sft, use_v2_block_manager=False, num_scheduler_steps=1, enable_prefix_caching=False, use_async_output_proc=True)
INFO 02-09 04:15:11 model_runner.py:997] Starting to load model /lustre/fast/fast/txiao/zly/ckpt/DeepSeek-Prover-V1.5-RL_numina-math-lean4-sft...
INFO 02-09 04:15:24 model_runner.py:1008] Loading model weights took 12.8725 GB
INFO 02-09 04:15:25 gpu_executor.py:122] # GPU blocks: 10150, # CPU blocks: 546
INFO 02-09 04:15:30 model_runner.py:1309] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 02-09 04:15:30 model_runner.py:1313] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-09 04:15:39 model_runner.py:1428] Graph capturing finished in 10 secs.
